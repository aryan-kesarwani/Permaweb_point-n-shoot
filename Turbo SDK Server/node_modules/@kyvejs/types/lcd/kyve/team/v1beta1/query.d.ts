import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TeamVestingAccount } from "./team";
export declare const protobufPackage = "kyve.team.v1beta1";
/** QueryAccountsRequest is request type for the Query/TeamInfo RPC method. */
export interface QueryTeamInfoRequest {
}
/** QueryAccountsResponse is response type for the Query/TeamInfo RPC method. */
export interface QueryTeamInfoResponse {
    /** foundation is the authority foundation address */
    foundation_authority: string;
    /** bcp is the authority bcp address */
    bcp_authority: string;
    /** total_team_allocation is the total allocation in $KYVE the team module has in order to reward team members */
    total_team_allocation: string;
    /** issued_team_allocation is the amount in $KYVE tied to team vesting accounts and which are not available anymore */
    issued_team_allocation: string;
    /**
     * available_team_allocation is the amount in $KYVE with which further team vesting accounts can be created.
     * if the available amount is zero no new vesting accounts can be created
     */
    available_team_allocation: string;
    /**
     * total_authority_rewards is the amount in $KYVE the authority has earned in total with inflation rewards.
     * Those rewards can be payed out for different purposes
     */
    total_authority_rewards: string;
    /** claimed_authority_rewards is the amount in $KYVE of how much the authority already claimed */
    claimed_authority_rewards: string;
    /** available_authority_rewards is the amount in $KYVE of how much rewards the authority can claim right now */
    available_authority_rewards: string;
    /** total_account_rewards is the amount in $KYVE all team vesting accounts have ever received */
    total_account_rewards: string;
    /** claimed_account_rewards is the amount in $KYVE all team vesting accounts have ever claimed */
    claimed_account_rewards: string;
    /** available_account_rewards is the total amount of $KYVE all team vesting accounts can currently claim */
    available_account_rewards: string;
    /**
     * required_module_balance is the balance the team module should have. If this is less than the module balance
     * something went wrong
     */
    required_module_balance: string;
    /** team_module_balance is the team module balance in $KYVE */
    team_module_balance: string;
}
/** QueryAccountsRequest is request type for the Query/TeamVestingAccounts RPC method. */
export interface QueryTeamVestingAccountsRequest {
}
/** QueryAccountsResponse is response type for the Query/TeamVestingAccounts RPC method. */
export interface QueryTeamVestingAccountsResponse {
    /** accounts holds all the team vesting accounts of this module. */
    accounts: TeamVestingAccount[];
}
/** QueryTeamVestingAccountRequest is request type for the Query/TeamVestingAccount RPC method. */
export interface QueryTeamVestingAccountRequest {
    /** id is a unique identify for each vesting account, tied to a single team member. */
    id: string;
}
/** QueryTeamVestingAccountResponse is the response type for the Query/TeamVestingAccount RPC method. */
export interface QueryTeamVestingAccountResponse {
    /** account holds the requested team vesting account */
    account?: TeamVestingAccount | undefined;
}
/** QueryTeamCurrentVestingStatusRequest is request type for the Query/TeamCurrentVestingStatus RPC method. */
export interface QueryTeamVestingStatusRequest {
    /** id is a unique identify for each vesting account, tied to a single team member. */
    id: string;
}
/** QueryTeamCurrentVestingStatusResponse is the response type for the Query/TeamCurrentVestingStatus RPC method. */
export interface QueryTeamVestingStatusResponse {
    /** request_date .. */
    request_date: string;
    /** plan ... */
    plan?: QueryVestingPlan | undefined;
    /** status .. */
    status?: QueryVestingStatus | undefined;
}
/** QueryTeamVestingStatusByTimeRequest is request type for the Query/TeamCurrentVestingByTimeStatus RPC method. */
export interface QueryTeamVestingStatusByTimeRequest {
    /** id is a unique identify for each vesting account, tied to a single team member. */
    id: string;
    /** time is a unix timestamp of the time the vesting progress should be calculated */
    time: string;
}
/** QueryTeamVestingStatusByTimeResponse is the response type for the Query/TeamCurrentVestingByTimeStatus RPC method. */
export interface QueryTeamVestingStatusByTimeResponse {
    /** request_date .. */
    request_date: string;
    /** plan ... */
    plan?: QueryVestingPlan | undefined;
    /** status .. */
    status?: QueryVestingStatus | undefined;
}
/** QueryVestingStatus is a type holding information about the account's vesting progress */
export interface QueryVestingStatus {
    /** total_vested_amount ... */
    total_vested_amount: string;
    /** total_unlocked_amount ... */
    total_unlocked_amount: string;
    /** current_claimable_amount ... */
    current_claimable_amount: string;
    /** locked_vested_amount ... */
    locked_vested_amount: string;
    /** remaining_unvested_amount ... */
    remaining_unvested_amount: string;
    /** claimed_amount ... */
    claimed_amount: string;
    /** total_rewards ... */
    total_rewards: string;
    /** claimed_rewards ... */
    claimed_rewards: string;
    /** available_rewards ... */
    available_rewards: string;
}
/** QueryVestingPlan is a type holding information about the account's vesting data which does not change */
export interface QueryVestingPlan {
    /** commencement ... */
    commencement: string;
    /** token_vesting_start ... */
    token_vesting_start: string;
    /** token_vesting_finished ... */
    token_vesting_finished: string;
    /** token_unlock_start ... */
    token_unlock_start: string;
    /** token_unlock_finished ... */
    token_unlock_finished: string;
    /** clawback ... */
    clawback: string;
    /** clawback_amount ... */
    clawback_amount: string;
    /** maximum_vesting_amount ... */
    maximum_vesting_amount: string;
}
export declare const QueryTeamInfoRequest: MessageFns<QueryTeamInfoRequest>;
export declare const QueryTeamInfoResponse: MessageFns<QueryTeamInfoResponse>;
export declare const QueryTeamVestingAccountsRequest: MessageFns<QueryTeamVestingAccountsRequest>;
export declare const QueryTeamVestingAccountsResponse: MessageFns<QueryTeamVestingAccountsResponse>;
export declare const QueryTeamVestingAccountRequest: MessageFns<QueryTeamVestingAccountRequest>;
export declare const QueryTeamVestingAccountResponse: MessageFns<QueryTeamVestingAccountResponse>;
export declare const QueryTeamVestingStatusRequest: MessageFns<QueryTeamVestingStatusRequest>;
export declare const QueryTeamVestingStatusResponse: MessageFns<QueryTeamVestingStatusResponse>;
export declare const QueryTeamVestingStatusByTimeRequest: MessageFns<QueryTeamVestingStatusByTimeRequest>;
export declare const QueryTeamVestingStatusByTimeResponse: MessageFns<QueryTeamVestingStatusByTimeResponse>;
export declare const QueryVestingStatus: MessageFns<QueryVestingStatus>;
export declare const QueryVestingPlan: MessageFns<QueryVestingPlan>;
/** Query defines the gRPC querier service. */
export interface Query {
    /** TeamInfo queries all important information from the team module */
    TeamInfo(request: QueryTeamInfoRequest): Promise<QueryTeamInfoResponse>;
    /** TeamVestingAccounts queries all team vesting accounts of the module. */
    TeamVestingAccounts(request: QueryTeamVestingAccountsRequest): Promise<QueryTeamVestingAccountsResponse>;
    /** TeamVestingAccount queries the team vesting accounts of the module. */
    TeamVestingAccount(request: QueryTeamVestingAccountRequest): Promise<QueryTeamVestingAccountResponse>;
    /** TeamCurrentVestingStatus queries the current vesting progress of a team vesting account */
    TeamVestingStatus(request: QueryTeamVestingStatusRequest): Promise<QueryTeamVestingStatusResponse>;
    /** TeamCurrentVestingStatus queries the current vesting progress of a team vesting account */
    TeamVestingStatusByTime(request: QueryTeamVestingStatusByTimeRequest): Promise<QueryTeamVestingStatusByTimeResponse>;
}
export declare const QueryServiceName = "kyve.team.v1beta1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    TeamInfo(request: QueryTeamInfoRequest): Promise<QueryTeamInfoResponse>;
    TeamVestingAccounts(request: QueryTeamVestingAccountsRequest): Promise<QueryTeamVestingAccountsResponse>;
    TeamVestingAccount(request: QueryTeamVestingAccountRequest): Promise<QueryTeamVestingAccountResponse>;
    TeamVestingStatus(request: QueryTeamVestingStatusRequest): Promise<QueryTeamVestingStatusResponse>;
    TeamVestingStatusByTime(request: QueryTeamVestingStatusByTimeRequest): Promise<QueryTeamVestingStatusByTimeResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
