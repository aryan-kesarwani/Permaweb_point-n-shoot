import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "kyve.pool.v1beta1";
/** PoolStatus ... */
export declare enum PoolStatus {
    /**
     * POOL_STATUS_UNSPECIFIED - POOL_STATUS_UNSPECIFIED indicates an unknown status, likely
     * due to an error
     */
    POOL_STATUS_UNSPECIFIED = 0,
    /**
     * POOL_STATUS_ACTIVE - POOL_STATUS_ACTIVE indicates, that the pool is running
     * normally
     */
    POOL_STATUS_ACTIVE = 1,
    /**
     * POOL_STATUS_DISABLED - POOL_STATUS_DISABLED indicates, that the pool was disabled
     * by the governance and does not continue until it is enabled
     * by the governance again
     */
    POOL_STATUS_DISABLED = 2,
    /**
     * POOL_STATUS_NO_FUNDS - POOL_STATUS_NO_FUNDS indicates, that the pool currently has no
     * funds, but is continuing normally anyway, due to inflation splitting
     */
    POOL_STATUS_NO_FUNDS = 3,
    /**
     * POOL_STATUS_NOT_ENOUGH_DELEGATION - POOL_STATUS_NOT_ENOUGH_DELEGATION indicates, that the min delegation
     * requirement has not been met and that the pool is halted
     */
    POOL_STATUS_NOT_ENOUGH_DELEGATION = 4,
    /**
     * POOL_STATUS_UPGRADING - POOL_STATUS_UPGRADING indicates, that the runtime is currently
     * being upgraded and that the pool is halted
     */
    POOL_STATUS_UPGRADING = 5,
    /**
     * POOL_STATUS_VOTING_POWER_TOO_HIGH - POOL_STATUS_VOTING_POWER_TOO_HIGH indicates, that one validator
     * has more than 50% voting power and that the pool is halted
     */
    POOL_STATUS_VOTING_POWER_TOO_HIGH = 6,
    /**
     * POOL_STATUS_END_KEY_REACHED - POOL_STATUS_END_KEY_REACHED indicates, that the end key has been
     * reached and that the pool is halted
     */
    POOL_STATUS_END_KEY_REACHED = 7,
    UNRECOGNIZED = -1
}
export declare function poolStatusFromJSON(object: any): PoolStatus;
export declare function poolStatusToJSON(object: PoolStatus): string;
/**
 * Protocol holds all info about the current pool version and the
 * available binaries for participating as a validator in a pool
 */
export interface Protocol {
    /** version holds the current software version tag of the pool binaries */
    version: string;
    /**
     * binaries is a stringified json object which holds binaries in the
     * current version for multiple platforms and architectures
     */
    binaries: string;
    /** last_upgrade is the unix time the pool was upgraded the last time */
    last_upgrade: string;
}
/** Upgrade holds all info when a pool has a scheduled upgrade */
export interface UpgradePlan {
    /** version is the new software version tag of the upgrade */
    version: string;
    /**
     * binaries is the new stringified json object which holds binaries in the
     * upgrade version for multiple platforms and architectures
     */
    binaries: string;
    /** scheduled_at is the unix time the upgrade is supposed to be done */
    scheduled_at: string;
    /**
     * duration is the time in seconds how long the pool should halt
     * during the upgrade to give all validators a chance of switching
     * to the new binaries
     */
    duration: string;
}
/** Pool ... */
export interface Pool {
    /** id - unique identifier of the pool, can not be changed */
    id: string;
    /** name is a human readable name for the pool */
    name: string;
    /** runtime specified which protocol and which version needs is required */
    runtime: string;
    /** logo is a link to an image file */
    logo: string;
    /**
     * config is either a JSON encoded string or a link to an external storage provider.
     * This is up to the implementation of the protocol node.
     */
    config: string;
    /** start_key ... */
    start_key: string;
    /** current_key ... */
    current_key: string;
    /** current_summary ... */
    current_summary: string;
    /** current_index ... */
    current_index: string;
    /** total_bundles is the number of total finalized bundles */
    total_bundles: string;
    /** upload_interval ... */
    upload_interval: string;
    /** inflation_share_weight ... */
    inflation_share_weight: string;
    /** min_delegation ... */
    min_delegation: string;
    /** max_bundle_size ... */
    max_bundle_size: string;
    /**
     * disabled is true when the pool is disabled.
     * Can only be done via governance.
     */
    disabled: boolean;
    /** protocol ... */
    protocol?: Protocol | undefined;
    /** upgrade_plan ... */
    upgrade_plan?: UpgradePlan | undefined;
    /** storage_provider_id ... */
    current_storage_provider_id: number;
    /** compression_id ... */
    current_compression_id: number;
    /**
     * end_key is the last key before the pool should stop indexing, it is
     * inclusive
     */
    end_key: string;
}
export declare const Protocol: MessageFns<Protocol>;
export declare const UpgradePlan: MessageFns<UpgradePlan>;
export declare const Pool: MessageFns<Pool>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
