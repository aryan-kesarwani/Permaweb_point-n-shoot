"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/query/v1/stakers.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryStakersClientImpl = exports.QueryStakersServiceName = exports.QueryStakersByPoolCountResponse = exports.QueryStakersByPoolCountRequest = exports.QueryStakersByPoolResponse = exports.QueryStakersByPoolRequest = exports.QueryStakerResponse = exports.QueryStakerRequest = exports.QueryStakersResponse = exports.QueryStakersRequest = exports.stakerStatusToNumber = exports.stakerStatusToJSON = exports.stakerStatusFromJSON = exports.StakerStatus = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
var query_1 = require("../v1beta1/query");
exports.protobufPackage = "kyve.query.v1";
/** StakerStatus ... */
var StakerStatus;
(function (StakerStatus) {
    /** STAKER_STATUS_UNSPECIFIED - STAKER_STATUS_UNSPECIFIED ... */
    StakerStatus["STAKER_STATUS_UNSPECIFIED"] = "STAKER_STATUS_UNSPECIFIED";
    /** STAKER_STATUS_PROTOCOL_ACTIVE - STAKER_STATUS_PROTOCOL_ACTIVE ... */
    StakerStatus["STAKER_STATUS_PROTOCOL_ACTIVE"] = "STAKER_STATUS_PROTOCOL_ACTIVE";
    /** STAKER_STATUS_PROTOCOL_INACTIVE - STAKER_STATUS_PROTOCOL_INACTIVE ... */
    StakerStatus["STAKER_STATUS_PROTOCOL_INACTIVE"] = "STAKER_STATUS_PROTOCOL_INACTIVE";
    /** STAKER_STATUS_CHAIN_ACTIVE - STAKER_STATUS_CHAIN_ACTIVE ... */
    StakerStatus["STAKER_STATUS_CHAIN_ACTIVE"] = "STAKER_STATUS_CHAIN_ACTIVE";
    /** STAKER_STATUS_CHAIN_INACTIVE - STAKER_STATUS_CHAIN_INACTIVE ... */
    StakerStatus["STAKER_STATUS_CHAIN_INACTIVE"] = "STAKER_STATUS_CHAIN_INACTIVE";
    StakerStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(StakerStatus = exports.StakerStatus || (exports.StakerStatus = {}));
function stakerStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "STAKER_STATUS_UNSPECIFIED":
            return StakerStatus.STAKER_STATUS_UNSPECIFIED;
        case 1:
        case "STAKER_STATUS_PROTOCOL_ACTIVE":
            return StakerStatus.STAKER_STATUS_PROTOCOL_ACTIVE;
        case 2:
        case "STAKER_STATUS_PROTOCOL_INACTIVE":
            return StakerStatus.STAKER_STATUS_PROTOCOL_INACTIVE;
        case 3:
        case "STAKER_STATUS_CHAIN_ACTIVE":
            return StakerStatus.STAKER_STATUS_CHAIN_ACTIVE;
        case 4:
        case "STAKER_STATUS_CHAIN_INACTIVE":
            return StakerStatus.STAKER_STATUS_CHAIN_INACTIVE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return StakerStatus.UNRECOGNIZED;
    }
}
exports.stakerStatusFromJSON = stakerStatusFromJSON;
function stakerStatusToJSON(object) {
    switch (object) {
        case StakerStatus.STAKER_STATUS_UNSPECIFIED:
            return "STAKER_STATUS_UNSPECIFIED";
        case StakerStatus.STAKER_STATUS_PROTOCOL_ACTIVE:
            return "STAKER_STATUS_PROTOCOL_ACTIVE";
        case StakerStatus.STAKER_STATUS_PROTOCOL_INACTIVE:
            return "STAKER_STATUS_PROTOCOL_INACTIVE";
        case StakerStatus.STAKER_STATUS_CHAIN_ACTIVE:
            return "STAKER_STATUS_CHAIN_ACTIVE";
        case StakerStatus.STAKER_STATUS_CHAIN_INACTIVE:
            return "STAKER_STATUS_CHAIN_INACTIVE";
        case StakerStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.stakerStatusToJSON = stakerStatusToJSON;
function stakerStatusToNumber(object) {
    switch (object) {
        case StakerStatus.STAKER_STATUS_UNSPECIFIED:
            return 0;
        case StakerStatus.STAKER_STATUS_PROTOCOL_ACTIVE:
            return 1;
        case StakerStatus.STAKER_STATUS_PROTOCOL_INACTIVE:
            return 2;
        case StakerStatus.STAKER_STATUS_CHAIN_ACTIVE:
            return 3;
        case StakerStatus.STAKER_STATUS_CHAIN_INACTIVE:
            return 4;
        case StakerStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
exports.stakerStatusToNumber = stakerStatusToNumber;
function createBaseQueryStakersRequest() {
    return { pagination: undefined, status: StakerStatus.STAKER_STATUS_UNSPECIFIED, search: "" };
}
exports.QueryStakersRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        if (message.status !== StakerStatus.STAKER_STATUS_UNSPECIFIED) {
            writer.uint32(16).int32(stakerStatusToNumber(message.status));
        }
        if (message.search !== "") {
            writer.uint32(26).string(message.search);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStakersRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.status = stakerStatusFromJSON(reader.int32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.search = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
            status: isSet(object.status) ? stakerStatusFromJSON(object.status) : StakerStatus.STAKER_STATUS_UNSPECIFIED,
            search: isSet(object.search) ? globalThis.String(object.search) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        if (message.status !== StakerStatus.STAKER_STATUS_UNSPECIFIED) {
            obj.status = stakerStatusToJSON(message.status);
        }
        if (message.search !== "") {
            obj.search = message.search;
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryStakersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueryStakersRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageRequest.fromPartial(object.pagination)
            : undefined;
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : StakerStatus.STAKER_STATUS_UNSPECIFIED;
        message.search = (_b = object.search) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryStakersResponse() {
    return { stakers: [], pagination: undefined };
}
exports.QueryStakersResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        for (var _i = 0, _a = message.stakers; _i < _a.length; _i++) {
            var v = _a[_i];
            query_1.FullStaker.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStakersResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stakers.push(query_1.FullStaker.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            stakers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakers) ? object.stakers.map(function (e) { return query_1.FullStaker.fromJSON(e); }) : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if ((_a = message.stakers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.stakers = message.stakers.map(function (e) { return query_1.FullStaker.toJSON(e); });
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryStakersResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryStakersResponse();
        message.stakers = ((_a = object.stakers) === null || _a === void 0 ? void 0 : _a.map(function (e) { return query_1.FullStaker.fromPartial(e); })) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryStakerRequest() {
    return { address: "" };
}
exports.QueryStakerRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStakerRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryStakerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryStakerRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryStakerResponse() {
    return { staker: undefined };
}
exports.QueryStakerResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.staker !== undefined) {
            query_1.FullStaker.encode(message.staker, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStakerResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.staker = query_1.FullStaker.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { staker: isSet(object.staker) ? query_1.FullStaker.fromJSON(object.staker) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.staker !== undefined) {
            obj.staker = query_1.FullStaker.toJSON(message.staker);
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryStakerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseQueryStakerResponse();
        message.staker = (object.staker !== undefined && object.staker !== null)
            ? query_1.FullStaker.fromPartial(object.staker)
            : undefined;
        return message;
    },
};
function createBaseQueryStakersByPoolRequest() {
    return { pool_id: "0" };
}
exports.QueryStakersByPoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.pool_id !== "0") {
            writer.uint32(8).uint64(message.pool_id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStakersByPoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryStakersByPoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryStakersByPoolRequest();
        message.pool_id = (_a = object.pool_id) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQueryStakersByPoolResponse() {
    return { stakers: [] };
}
exports.QueryStakersByPoolResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        for (var _i = 0, _a = message.stakers; _i < _a.length; _i++) {
            var v = _a[_i];
            query_1.FullStaker.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStakersByPoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stakers.push(query_1.FullStaker.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            stakers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakers) ? object.stakers.map(function (e) { return query_1.FullStaker.fromJSON(e); }) : [],
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if ((_a = message.stakers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.stakers = message.stakers.map(function (e) { return query_1.FullStaker.toJSON(e); });
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryStakersByPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryStakersByPoolResponse();
        message.stakers = ((_a = object.stakers) === null || _a === void 0 ? void 0 : _a.map(function (e) { return query_1.FullStaker.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseQueryStakersByPoolCountRequest() {
    return { pagination: undefined };
}
exports.QueryStakersByPoolCountRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStakersByPoolCountRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryStakersByPoolCountRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseQueryStakersByPoolCountRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryStakersByPoolCountResponse() {
    return { stakers: [], pagination: undefined };
}
exports.QueryStakersByPoolCountResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        for (var _i = 0, _a = message.stakers; _i < _a.length; _i++) {
            var v = _a[_i];
            query_1.FullStaker.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStakersByPoolCountResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stakers.push(query_1.FullStaker.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            stakers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stakers) ? object.stakers.map(function (e) { return query_1.FullStaker.fromJSON(e); }) : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if ((_a = message.stakers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.stakers = message.stakers.map(function (e) { return query_1.FullStaker.toJSON(e); });
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryStakersByPoolCountResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryStakersByPoolCountResponse();
        message.stakers = ((_a = object.stakers) === null || _a === void 0 ? void 0 : _a.map(function (e) { return query_1.FullStaker.fromPartial(e); })) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
exports.QueryStakersServiceName = "kyve.query.v1.QueryStakers";
var QueryStakersClientImpl = /** @class */ (function () {
    function QueryStakersClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryStakersServiceName;
        this.rpc = rpc;
        this.Stakers = this.Stakers.bind(this);
        this.Staker = this.Staker.bind(this);
        this.StakersByPool = this.StakersByPool.bind(this);
        this.StakersByPoolCount = this.StakersByPoolCount.bind(this);
    }
    QueryStakersClientImpl.prototype.Stakers = function (request) {
        var data = exports.QueryStakersRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Stakers", data);
        return promise.then(function (data) { return exports.QueryStakersResponse.decode(new wire_1.BinaryReader(data)); });
    };
    QueryStakersClientImpl.prototype.Staker = function (request) {
        var data = exports.QueryStakerRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Staker", data);
        return promise.then(function (data) { return exports.QueryStakerResponse.decode(new wire_1.BinaryReader(data)); });
    };
    QueryStakersClientImpl.prototype.StakersByPool = function (request) {
        var data = exports.QueryStakersByPoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "StakersByPool", data);
        return promise.then(function (data) { return exports.QueryStakersByPoolResponse.decode(new wire_1.BinaryReader(data)); });
    };
    QueryStakersClientImpl.prototype.StakersByPoolCount = function (request) {
        var data = exports.QueryStakersByPoolCountRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "StakersByPoolCount", data);
        return promise.then(function (data) { return exports.QueryStakersByPoolCountResponse.decode(new wire_1.BinaryReader(data)); });
    };
    return QueryStakersClientImpl;
}());
exports.QueryStakersClientImpl = QueryStakersClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=stakers.js.map