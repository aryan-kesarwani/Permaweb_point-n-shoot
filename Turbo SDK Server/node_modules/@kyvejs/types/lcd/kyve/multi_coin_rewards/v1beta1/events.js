"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/multi_coin_rewards/v1beta1/events.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventToggleMultiCoinRewards = exports.EventUpdateParams = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var params_1 = require("./params");
exports.protobufPackage = "kyve.multi_coin_rewards.v1beta1";
function createBaseEventUpdateParams() {
    return { old_params: undefined, new_params: undefined, payload: "" };
}
exports.EventUpdateParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.old_params !== undefined) {
            params_1.Params.encode(message.old_params, writer.uint32(10).fork()).join();
        }
        if (message.new_params !== undefined) {
            params_1.Params.encode(message.new_params, writer.uint32(18).fork()).join();
        }
        if (message.payload !== "") {
            writer.uint32(26).string(message.payload);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventUpdateParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.old_params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.new_params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.payload = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            old_params: isSet(object.old_params) ? params_1.Params.fromJSON(object.old_params) : undefined,
            new_params: isSet(object.new_params) ? params_1.Params.fromJSON(object.new_params) : undefined,
            payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.old_params !== undefined) {
            obj.old_params = params_1.Params.toJSON(message.old_params);
        }
        if (message.new_params !== undefined) {
            obj.new_params = params_1.Params.toJSON(message.new_params);
        }
        if (message.payload !== "") {
            obj.payload = message.payload;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventUpdateParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseEventUpdateParams();
        message.old_params = (object.old_params !== undefined && object.old_params !== null)
            ? params_1.Params.fromPartial(object.old_params)
            : undefined;
        message.new_params = (object.new_params !== undefined && object.new_params !== null)
            ? params_1.Params.fromPartial(object.new_params)
            : undefined;
        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseEventToggleMultiCoinRewards() {
    return { address: "", enabled: false, pending_rewards_claimed: "" };
}
exports.EventToggleMultiCoinRewards = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.enabled !== false) {
            writer.uint32(16).bool(message.enabled);
        }
        if (message.pending_rewards_claimed !== "") {
            writer.uint32(26).string(message.pending_rewards_claimed);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventToggleMultiCoinRewards();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.pending_rewards_claimed = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
            pending_rewards_claimed: isSet(object.pending_rewards_claimed)
                ? globalThis.String(object.pending_rewards_claimed)
                : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.enabled !== false) {
            obj.enabled = message.enabled;
        }
        if (message.pending_rewards_claimed !== "") {
            obj.pending_rewards_claimed = message.pending_rewards_claimed;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventToggleMultiCoinRewards.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseEventToggleMultiCoinRewards();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.enabled = (_b = object.enabled) !== null && _b !== void 0 ? _b : false;
        message.pending_rewards_claimed = (_c = object.pending_rewards_claimed) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map