import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "kyve.funders.v1beta1";
/** MsgCreateFunder defines a SDK message for creating a funder. */
export interface MsgCreateFunder {
    /** creator ... */
    creator: string;
    /** moniker */
    moniker: string;
    /** identity is the 64 bit keybase.io identity string */
    identity: string;
    /** website */
    website: string;
    /** contact */
    contact: string;
    /** description are some additional notes the funder finds important */
    description: string;
}
/** MsgCreateFunderResponse defines the Msg/CreateFunder response type. */
export interface MsgCreateFunderResponse {
}
/** MsgUpdateFunder defines a SDK message for updating a funder. */
export interface MsgUpdateFunder {
    /** creator ... */
    creator: string;
    /** moniker */
    moniker: string;
    /** identity is the 64 bit keybase.io identity string */
    identity: string;
    /** website */
    website: string;
    /** contact */
    contact: string;
    /** description are some additional notes the funder finds important */
    description: string;
}
/** MsgUpdateFunderResponse defines the Msg/UpdateFunder response type. */
export interface MsgUpdateFunderResponse {
}
/** MsgFundPool defines a SDK message for funding a pool. */
export interface MsgFundPool {
    /** creator is the funder of the pool */
    creator: string;
    /** pool_id is the identifier of the pool */
    pool_id: string;
    /** amounts is a list of coins the creator wants to fund */
    amounts: Coin[];
    /**
     * amounts_per_bundle is a list of coins the creator wants to distribute
     * per finalized bundle
     */
    amounts_per_bundle: Coin[];
}
/** MsgFundPoolResponse defines the Msg/DefundPool response type. */
export interface MsgFundPoolResponse {
}
/** MsgDefundPool defines a SDK message for defunding a pool. */
export interface MsgDefundPool {
    /** creator is the funder of the pool who wants to defund now */
    creator: string;
    /** pool_id is the identifier of the pool */
    pool_id: string;
    /** amounts is a list of coins the creator wants to defund from the pool */
    amounts: Coin[];
}
/** MsgDefundPoolResponse defines the Msg/DefundPool response type. */
export interface MsgDefundPoolResponse {
}
/** MsgUpdateParams defines a SDK message for updating the module parameters. */
export interface MsgUpdateParams {
    /** authority is the address of the governance account. */
    authority: string;
    /** payload defines the x/delegation parameters to update. */
    payload: string;
}
/** MsgUpdateParamsResponse defines the Msg/UpdateParams response type. */
export interface MsgUpdateParamsResponse {
}
export declare const MsgCreateFunder: MessageFns<MsgCreateFunder>;
export declare const MsgCreateFunderResponse: MessageFns<MsgCreateFunderResponse>;
export declare const MsgUpdateFunder: MessageFns<MsgUpdateFunder>;
export declare const MsgUpdateFunderResponse: MessageFns<MsgUpdateFunderResponse>;
export declare const MsgFundPool: MessageFns<MsgFundPool>;
export declare const MsgFundPoolResponse: MessageFns<MsgFundPoolResponse>;
export declare const MsgDefundPool: MessageFns<MsgDefundPool>;
export declare const MsgDefundPoolResponse: MessageFns<MsgDefundPoolResponse>;
export declare const MsgUpdateParams: MessageFns<MsgUpdateParams>;
export declare const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse>;
/** Msg defines the Msg service. */
export interface Msg {
    /** CreateFunder ... */
    CreateFunder(request: MsgCreateFunder): Promise<MsgCreateFunderResponse>;
    /** UpdateFunder ... */
    UpdateFunder(request: MsgUpdateFunder): Promise<MsgUpdateFunderResponse>;
    /** FundPool ... */
    FundPool(request: MsgFundPool): Promise<MsgFundPoolResponse>;
    /** DefundPool ... */
    DefundPool(request: MsgDefundPool): Promise<MsgDefundPoolResponse>;
    /**
     * UpdateParams defines a governance operation for updating the x/delegation module
     * parameters. The authority is hard-coded to the x/gov module account.
     */
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
export declare const MsgServiceName = "kyve.funders.v1beta1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    CreateFunder(request: MsgCreateFunder): Promise<MsgCreateFunderResponse>;
    UpdateFunder(request: MsgUpdateFunder): Promise<MsgUpdateFunderResponse>;
    FundPool(request: MsgFundPool): Promise<MsgFundPoolResponse>;
    DefundPool(request: MsgDefundPool): Promise<MsgDefundPoolResponse>;
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
