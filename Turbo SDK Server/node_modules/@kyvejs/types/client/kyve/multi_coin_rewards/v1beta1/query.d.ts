import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "./params";
import { MultiCoinDistributionPolicy } from "./types";
export declare const protobufPackage = "kyve.multi_coin_rewards.v1beta1";
/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params holds all the parameters of this module. */
    params?: Params | undefined;
}
/** QueryMultiCoinDistributionPolicyRequest ... */
export interface QueryMultiCoinDistributionPolicyRequest {
}
/** QueryMultiCoinDistributionPolicyResponse ... */
export interface QueryMultiCoinDistributionPolicyResponse {
    /** params holds all the parameters of this module. */
    policy?: MultiCoinDistributionPolicy | undefined;
}
/** QueryMultiCoinDistributionPolicyRequest ... */
export interface QueryMultiCoinStatusRequest {
    /** address ... */
    address: string;
}
/** QueryMultiCoinDistributionPolicyResponse ... */
export interface QueryMultiCoinStatusResponse {
    /** enabled ... */
    enabled: boolean;
    /** pending_multi_coin_rewards ... */
    pending_multi_coin_rewards: Coin[];
}
export declare const QueryParamsRequest: MessageFns<QueryParamsRequest>;
export declare const QueryParamsResponse: MessageFns<QueryParamsResponse>;
export declare const QueryMultiCoinDistributionPolicyRequest: MessageFns<QueryMultiCoinDistributionPolicyRequest>;
export declare const QueryMultiCoinDistributionPolicyResponse: MessageFns<QueryMultiCoinDistributionPolicyResponse>;
export declare const QueryMultiCoinStatusRequest: MessageFns<QueryMultiCoinStatusRequest>;
export declare const QueryMultiCoinStatusResponse: MessageFns<QueryMultiCoinStatusResponse>;
/** Query defines the gRPC querier service. */
export interface Query {
    /** Parameters queries the parameters of the module. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    /** policy, multi-coin-enabled, multi-coin-status/address: {enabled true false, pending rewards} */
    MultiCoinDistributionPolicyQuery(request: QueryMultiCoinDistributionPolicyRequest): Promise<QueryMultiCoinDistributionPolicyResponse>;
    /** MultiCoinStatus ... */
    MultiCoinStatus(request: QueryMultiCoinStatusRequest): Promise<QueryMultiCoinStatusResponse>;
}
export declare const QueryServiceName = "kyve.multi_coin_rewards.v1beta1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    MultiCoinDistributionPolicyQuery(request: QueryMultiCoinDistributionPolicyRequest): Promise<QueryMultiCoinDistributionPolicyResponse>;
    MultiCoinStatus(request: QueryMultiCoinStatusRequest): Promise<QueryMultiCoinStatusResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
