"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var tx_registry_1 = require("../../../../../registry/tx.registry");
var signing_1 = require("../../../signing");
var CosmosStakingMethods = /** @class */ (function (_super) {
    __extends(CosmosStakingMethods, _super);
    function CosmosStakingMethods() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CosmosStakingMethods.prototype.delegate = function (value, options) {
        var _this = this;
        var tx = tx_registry_1.withTypeUrl.delegate(__assign(__assign({}, value), { delegatorAddress: this.address }));
        return new signing_1.PendingTx({ tx: [tx] }, function () {
            return _this.getPendingSignedTx(tx, options);
        });
    };
    CosmosStakingMethods.prototype.undelegate = function (value, options) {
        var _this = this;
        var tx = tx_registry_1.withTypeUrl.undelegate(__assign(__assign({}, value), { delegatorAddress: this.address }));
        return new signing_1.PendingTx({ tx: [tx] }, function () {
            return _this.getPendingSignedTx(tx, options);
        });
    };
    CosmosStakingMethods.prototype.cancelUnbonding = function (value, options) {
        var _this = this;
        var tx = tx_registry_1.withTypeUrl.cancelUnbonding(__assign(__assign({}, value), { delegatorAddress: this.address }));
        return new signing_1.PendingTx({ tx: [tx] }, function () {
            return _this.getPendingSignedTx(tx, options);
        });
    };
    CosmosStakingMethods.prototype.redelegate = function (value, options) {
        var _this = this;
        var tx = tx_registry_1.withTypeUrl.redelegate(__assign(__assign({}, value), { delegatorAddress: this.address }));
        return new signing_1.PendingTx({ tx: [tx] }, function () {
            return _this.getPendingSignedTx(tx, options);
        });
    };
    CosmosStakingMethods.prototype.createValidator = function (value, options) {
        var _this = this;
        var tx = tx_registry_1.withTypeUrl.createValidator(__assign(__assign({}, value), { validatorAddress: this.validatorAddress }));
        return new signing_1.PendingTx({ tx: [tx] }, function () {
            return _this.getPendingSignedTx(tx, options);
        });
    };
    CosmosStakingMethods.prototype.editValidator = function (value, options) {
        var _this = this;
        var tx = tx_registry_1.withTypeUrl.editValidator(__assign(__assign({}, value), { validatorAddress: this.validatorAddress }));
        return new signing_1.PendingTx({ tx: [tx] }, function () {
            return _this.getPendingSignedTx(tx, options);
        });
    };
    return CosmosStakingMethods;
}(signing_1.KyveSigning));
exports.default = CosmosStakingMethods;
//# sourceMappingURL=staking.js.map