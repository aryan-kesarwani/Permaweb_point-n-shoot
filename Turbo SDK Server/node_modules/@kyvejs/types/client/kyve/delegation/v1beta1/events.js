"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/delegation/v1beta1/events.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventWithdrawRewards = exports.EventUndelegate = exports.EventStartUndelegation = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "kyve.delegation.v1beta1";
function createBaseEventStartUndelegation() {
    return { address: "", staker: "", amount: "0", estimated_undelegation_date: "0" };
}
exports.EventStartUndelegation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.staker !== "") {
            writer.uint32(18).string(message.staker);
        }
        if (message.amount !== "0") {
            writer.uint32(24).uint64(message.amount);
        }
        if (message.estimated_undelegation_date !== "0") {
            writer.uint32(32).uint64(message.estimated_undelegation_date);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventStartUndelegation();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.staker = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.amount = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.estimated_undelegation_date = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            staker: isSet(object.staker) ? globalThis.String(object.staker) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "0",
            estimated_undelegation_date: isSet(object.estimated_undelegation_date)
                ? globalThis.String(object.estimated_undelegation_date)
                : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.staker !== "") {
            obj.staker = message.staker;
        }
        if (message.amount !== "0") {
            obj.amount = message.amount;
        }
        if (message.estimated_undelegation_date !== "0") {
            obj.estimated_undelegation_date = message.estimated_undelegation_date;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventStartUndelegation.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseEventStartUndelegation();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.staker = (_b = object.staker) !== null && _b !== void 0 ? _b : "";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "0";
        message.estimated_undelegation_date = (_d = object.estimated_undelegation_date) !== null && _d !== void 0 ? _d : "0";
        return message;
    },
};
function createBaseEventUndelegate() {
    return { address: "", staker: "", amount: "0" };
}
exports.EventUndelegate = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.staker !== "") {
            writer.uint32(18).string(message.staker);
        }
        if (message.amount !== "0") {
            writer.uint32(24).uint64(message.amount);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventUndelegate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.staker = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.amount = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            staker: isSet(object.staker) ? globalThis.String(object.staker) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.staker !== "") {
            obj.staker = message.staker;
        }
        if (message.amount !== "0") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventUndelegate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseEventUndelegate();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.staker = (_b = object.staker) !== null && _b !== void 0 ? _b : "";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseEventWithdrawRewards() {
    return { address: "", staker: "", amounts: "" };
}
exports.EventWithdrawRewards = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.staker !== "") {
            writer.uint32(18).string(message.staker);
        }
        if (message.amounts !== "") {
            writer.uint32(26).string(message.amounts);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventWithdrawRewards();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.staker = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.amounts = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            staker: isSet(object.staker) ? globalThis.String(object.staker) : "",
            amounts: isSet(object.amounts) ? globalThis.String(object.amounts) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.staker !== "") {
            obj.staker = message.staker;
        }
        if (message.amounts !== "") {
            obj.amounts = message.amounts;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventWithdrawRewards.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseEventWithdrawRewards();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.staker = (_b = object.staker) !== null && _b !== void 0 ? _b : "";
        message.amounts = (_c = object.amounts) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map