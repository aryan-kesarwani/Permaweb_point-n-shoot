import { StdSignature } from "@cosmjs/amino";
import { AccountData, OfflineAminoSigner } from "@cosmjs/amino/build/signer";
import { SigningStargateClient } from "@cosmjs/stargate";
import { IConfig } from "../../constants";
import KyveBaseMethods from "./kyve/base/v1beta1/base";
import KyveBundlesMethods from "./kyve/bundles/v1beta1/bundles";
import KyveFundersMethods from "./kyve/funders/v1beta1/funders";
import KyveGovMethodsV1 from "./kyve/gov/v1/gov";
import KyveStakersMethods from "./kyve/stakers/v1/stakers";
import KyveMultiCoinRewardsMethods from "./kyve/multi_coin_rewards/v1beta1/multi_coin_rewards";
import KyveBankMethods from "./cosmos/bank/v1beta1/bank";
import KyveStakingMethods from "./cosmos/staking/v1beta1/staking";
import KyveDistributionMethods from "./cosmos/distribution/v1beta1/distribution";
export default class KyveClient {
    nativeClient: SigningStargateClient;
    readonly account: AccountData;
    readonly config: IConfig;
    cosmos: {
        bank: {
            v1beta1: KyveBankMethods;
        };
        staking: {
            v1beta1: KyveStakingMethods;
        };
        distribution: {
            v1beta1: KyveDistributionMethods;
        };
    };
    kyve: {
        base: {
            v1beta1: KyveBaseMethods;
        };
        gov: {
            v1: KyveGovMethodsV1;
        };
        bundles: {
            v1beta1: KyveBundlesMethods;
        };
        funders: {
            v1beta1: KyveFundersMethods;
        };
        stakers: {
            v1: KyveStakersMethods;
        };
        multi_coin_rewards: {
            v1beta1: KyveMultiCoinRewardsMethods;
        };
    };
    private aminoSigner;
    constructor(client: SigningStargateClient, account: AccountData, config: IConfig, aminoSigner: OfflineAminoSigner | null);
    signString(message: string): Promise<StdSignature>;
    getKyveBalance(): Promise<string>;
}
