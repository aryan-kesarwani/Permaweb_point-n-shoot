"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/stakers/v1/params.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "kyve.stakers.v1";
function createBaseParams() {
    return {
        commission_change_time: "0",
        leave_pool_time: "0",
        stake_fraction_change_time: "0",
        vote_slash: "",
        upload_slash: "",
        timeout_slash: "",
    };
}
exports.Params = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.commission_change_time !== "0") {
            writer.uint32(8).uint64(message.commission_change_time);
        }
        if (message.leave_pool_time !== "0") {
            writer.uint32(16).uint64(message.leave_pool_time);
        }
        if (message.stake_fraction_change_time !== "0") {
            writer.uint32(24).uint64(message.stake_fraction_change_time);
        }
        if (message.vote_slash !== "") {
            writer.uint32(34).string(message.vote_slash);
        }
        if (message.upload_slash !== "") {
            writer.uint32(42).string(message.upload_slash);
        }
        if (message.timeout_slash !== "") {
            writer.uint32(50).string(message.timeout_slash);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.commission_change_time = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.leave_pool_time = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.stake_fraction_change_time = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.vote_slash = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.upload_slash = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.timeout_slash = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            commission_change_time: isSet(object.commission_change_time)
                ? globalThis.String(object.commission_change_time)
                : "0",
            leave_pool_time: isSet(object.leave_pool_time) ? globalThis.String(object.leave_pool_time) : "0",
            stake_fraction_change_time: isSet(object.stake_fraction_change_time)
                ? globalThis.String(object.stake_fraction_change_time)
                : "0",
            vote_slash: isSet(object.vote_slash) ? globalThis.String(object.vote_slash) : "",
            upload_slash: isSet(object.upload_slash) ? globalThis.String(object.upload_slash) : "",
            timeout_slash: isSet(object.timeout_slash) ? globalThis.String(object.timeout_slash) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.commission_change_time !== "0") {
            obj.commission_change_time = message.commission_change_time;
        }
        if (message.leave_pool_time !== "0") {
            obj.leave_pool_time = message.leave_pool_time;
        }
        if (message.stake_fraction_change_time !== "0") {
            obj.stake_fraction_change_time = message.stake_fraction_change_time;
        }
        if (message.vote_slash !== "") {
            obj.vote_slash = message.vote_slash;
        }
        if (message.upload_slash !== "") {
            obj.upload_slash = message.upload_slash;
        }
        if (message.timeout_slash !== "") {
            obj.timeout_slash = message.timeout_slash;
        }
        return obj;
    },
    create: function (base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseParams();
        message.commission_change_time = (_a = object.commission_change_time) !== null && _a !== void 0 ? _a : "0";
        message.leave_pool_time = (_b = object.leave_pool_time) !== null && _b !== void 0 ? _b : "0";
        message.stake_fraction_change_time = (_c = object.stake_fraction_change_time) !== null && _c !== void 0 ? _c : "0";
        message.vote_slash = (_d = object.vote_slash) !== null && _d !== void 0 ? _d : "";
        message.upload_slash = (_e = object.upload_slash) !== null && _e !== void 0 ? _e : "";
        message.timeout_slash = (_f = object.timeout_slash) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=params.js.map