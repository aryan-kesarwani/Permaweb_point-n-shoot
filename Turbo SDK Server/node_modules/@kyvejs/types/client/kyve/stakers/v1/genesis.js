"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/stakers/v1/genesis.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var params_1 = require("./params");
var stakers_1 = require("./stakers");
exports.protobufPackage = "kyve.stakers.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        staker_list: [],
        pool_account_list: [],
        commission_change_entries: [],
        queue_state_commission: undefined,
        leave_pool_entries: [],
        queue_state_leave: undefined,
        stake_fraction_change_entries: [],
        queue_state_stake_fraction: undefined,
    };
}
exports.GenesisState = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        for (var _i = 0, _a = message.staker_list; _i < _a.length; _i++) {
            var v = _a[_i];
            stakers_1.Staker.encode(v, writer.uint32(18).fork()).join();
        }
        for (var _b = 0, _c = message.pool_account_list; _b < _c.length; _b++) {
            var v = _c[_b];
            stakers_1.PoolAccount.encode(v, writer.uint32(26).fork()).join();
        }
        for (var _d = 0, _e = message.commission_change_entries; _d < _e.length; _d++) {
            var v = _e[_d];
            stakers_1.CommissionChangeEntry.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.queue_state_commission !== undefined) {
            stakers_1.QueueState.encode(message.queue_state_commission, writer.uint32(42).fork()).join();
        }
        for (var _f = 0, _g = message.leave_pool_entries; _f < _g.length; _f++) {
            var v = _g[_f];
            stakers_1.LeavePoolEntry.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.queue_state_leave !== undefined) {
            stakers_1.QueueState.encode(message.queue_state_leave, writer.uint32(58).fork()).join();
        }
        for (var _h = 0, _j = message.stake_fraction_change_entries; _h < _j.length; _h++) {
            var v = _j[_h];
            stakers_1.StakeFractionChangeEntry.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.queue_state_stake_fraction !== undefined) {
            stakers_1.QueueState.encode(message.queue_state_stake_fraction, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGenesisState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.staker_list.push(stakers_1.Staker.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.pool_account_list.push(stakers_1.PoolAccount.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.commission_change_entries.push(stakers_1.CommissionChangeEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.queue_state_commission = stakers_1.QueueState.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.leave_pool_entries.push(stakers_1.LeavePoolEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.queue_state_leave = stakers_1.QueueState.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.stake_fraction_change_entries.push(stakers_1.StakeFractionChangeEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.queue_state_stake_fraction = stakers_1.QueueState.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            staker_list: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.staker_list)
                ? object.staker_list.map(function (e) { return stakers_1.Staker.fromJSON(e); })
                : [],
            pool_account_list: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pool_account_list)
                ? object.pool_account_list.map(function (e) { return stakers_1.PoolAccount.fromJSON(e); })
                : [],
            commission_change_entries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.commission_change_entries)
                ? object.commission_change_entries.map(function (e) { return stakers_1.CommissionChangeEntry.fromJSON(e); })
                : [],
            queue_state_commission: isSet(object.queue_state_commission)
                ? stakers_1.QueueState.fromJSON(object.queue_state_commission)
                : undefined,
            leave_pool_entries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.leave_pool_entries)
                ? object.leave_pool_entries.map(function (e) { return stakers_1.LeavePoolEntry.fromJSON(e); })
                : [],
            queue_state_leave: isSet(object.queue_state_leave) ? stakers_1.QueueState.fromJSON(object.queue_state_leave) : undefined,
            stake_fraction_change_entries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stake_fraction_change_entries)
                ? object.stake_fraction_change_entries.map(function (e) { return stakers_1.StakeFractionChangeEntry.fromJSON(e); })
                : [],
            queue_state_stake_fraction: isSet(object.queue_state_stake_fraction)
                ? stakers_1.QueueState.fromJSON(object.queue_state_stake_fraction)
                : undefined,
        };
    },
    toJSON: function (message) {
        var _a, _b, _c, _d, _e;
        var obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        if ((_a = message.staker_list) === null || _a === void 0 ? void 0 : _a.length) {
            obj.staker_list = message.staker_list.map(function (e) { return stakers_1.Staker.toJSON(e); });
        }
        if ((_b = message.pool_account_list) === null || _b === void 0 ? void 0 : _b.length) {
            obj.pool_account_list = message.pool_account_list.map(function (e) { return stakers_1.PoolAccount.toJSON(e); });
        }
        if ((_c = message.commission_change_entries) === null || _c === void 0 ? void 0 : _c.length) {
            obj.commission_change_entries = message.commission_change_entries.map(function (e) { return stakers_1.CommissionChangeEntry.toJSON(e); });
        }
        if (message.queue_state_commission !== undefined) {
            obj.queue_state_commission = stakers_1.QueueState.toJSON(message.queue_state_commission);
        }
        if ((_d = message.leave_pool_entries) === null || _d === void 0 ? void 0 : _d.length) {
            obj.leave_pool_entries = message.leave_pool_entries.map(function (e) { return stakers_1.LeavePoolEntry.toJSON(e); });
        }
        if (message.queue_state_leave !== undefined) {
            obj.queue_state_leave = stakers_1.QueueState.toJSON(message.queue_state_leave);
        }
        if ((_e = message.stake_fraction_change_entries) === null || _e === void 0 ? void 0 : _e.length) {
            obj.stake_fraction_change_entries = message.stake_fraction_change_entries.map(function (e) {
                return stakers_1.StakeFractionChangeEntry.toJSON(e);
            });
        }
        if (message.queue_state_stake_fraction !== undefined) {
            obj.queue_state_stake_fraction = stakers_1.QueueState.toJSON(message.queue_state_stake_fraction);
        }
        return obj;
    },
    create: function (base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseGenesisState();
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        message.staker_list = ((_a = object.staker_list) === null || _a === void 0 ? void 0 : _a.map(function (e) { return stakers_1.Staker.fromPartial(e); })) || [];
        message.pool_account_list = ((_b = object.pool_account_list) === null || _b === void 0 ? void 0 : _b.map(function (e) { return stakers_1.PoolAccount.fromPartial(e); })) || [];
        message.commission_change_entries =
            ((_c = object.commission_change_entries) === null || _c === void 0 ? void 0 : _c.map(function (e) { return stakers_1.CommissionChangeEntry.fromPartial(e); })) || [];
        message.queue_state_commission =
            (object.queue_state_commission !== undefined && object.queue_state_commission !== null)
                ? stakers_1.QueueState.fromPartial(object.queue_state_commission)
                : undefined;
        message.leave_pool_entries = ((_d = object.leave_pool_entries) === null || _d === void 0 ? void 0 : _d.map(function (e) { return stakers_1.LeavePoolEntry.fromPartial(e); })) || [];
        message.queue_state_leave = (object.queue_state_leave !== undefined && object.queue_state_leave !== null)
            ? stakers_1.QueueState.fromPartial(object.queue_state_leave)
            : undefined;
        message.stake_fraction_change_entries =
            ((_e = object.stake_fraction_change_entries) === null || _e === void 0 ? void 0 : _e.map(function (e) { return stakers_1.StakeFractionChangeEntry.fromPartial(e); })) || [];
        message.queue_state_stake_fraction =
            (object.queue_state_stake_fraction !== undefined && object.queue_state_stake_fraction !== null)
                ? stakers_1.QueueState.fromPartial(object.queue_state_stake_fraction)
                : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map