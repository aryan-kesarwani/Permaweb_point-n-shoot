"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withTypeUrl = exports.encodeTxMsg = exports.load = exports.registry = void 0;
var stargate_1 = require("@cosmjs/stargate");
/** cosmos **/
var tx_1 = require("@kyvejs/types/client/cosmos/gov/v1/tx");
var tx_2 = require("@kyvejs/types/client/cosmos/gov/v1/tx");
/** bundles **/
var tx_3 = require("@kyvejs/types/client/kyve/bundles/v1beta1/tx");
var tx_4 = require("@kyvejs/types/client/kyve/bundles/v1beta1/tx");
var tx_5 = require("@kyvejs/types/client/kyve/bundles/v1beta1/tx");
var tx_6 = require("@kyvejs/types/client/kyve/bundles/v1beta1/tx");
var tx_7 = require("@kyvejs/types/client/kyve/bundles/v1beta1/tx");
/** fees **/
var tx_8 = require("@kyvejs/types/client/kyve/global/v1beta1/tx");
var tx_9 = require("@kyvejs/types/client/kyve/pool/v1beta1/tx");
var tx_10 = require("@kyvejs/types/client/kyve/pool/v1beta1/tx");
var tx_11 = require("@kyvejs/types/client/kyve/pool/v1beta1/tx");
var tx_12 = require("@kyvejs/types/client/kyve/pool/v1beta1/tx");
var tx_13 = require("@kyvejs/types/client/kyve/pool/v1beta1/tx");
var tx_14 = require("@kyvejs/types/client/kyve/pool/v1beta1/tx");
/** stakers **/
var tx_15 = require("@kyvejs/types/client/kyve/stakers/v1/tx");
var tx_16 = require("@kyvejs/types/client/kyve/stakers/v1/tx");
var tx_17 = require("@kyvejs/types/client/kyve/stakers/v1/tx");
var tx_18 = require("@kyvejs/types/client/kyve/stakers/v1/tx");
var tx_19 = require("@kyvejs/types/client/kyve/stakers/v1/tx");
/** funders **/
var tx_20 = require("@kyvejs/types/lcd/kyve/funders/v1beta1/tx");
var tx_21 = require("@kyvejs/types/lcd/kyve/funders/v1beta1/tx");
var tx_22 = require("@kyvejs/types/client/kyve/funders/v1beta1/tx");
var tx_23 = require("@kyvejs/types/client/kyve/funders/v1beta1/tx");
var tx_24 = require("cosmjs-types/cosmos/distribution/v1beta1/tx");
var tx_25 = require("cosmjs-types/cosmos/staking/v1beta1/tx");
/** multi_coin_rewards **/
var tx_26 = require("@kyvejs/types/client/kyve/multi_coin_rewards/v1beta1/tx");
var tx_27 = require("@kyvejs/types/client/kyve/multi_coin_rewards/v1beta1/tx");
var tx_28 = require("@kyvejs/types/client/kyve/multi_coin_rewards/v1beta1/tx");
// TODO: why does <[string, GeneratedType]> does not work anymore?
exports.registry = __spreadArray(__spreadArray([], stargate_1.defaultRegistryTypes, true), [
    /**pool **/
    ["/kyve.pool.v1beta1.MsgCreatePool", tx_9.MsgCreatePool],
    ["/kyve.pool.v1beta1.UpdatePool", tx_10.MsgUpdatePool],
    ["/kyve.pool.v1beta1.MsgDisablePool", tx_11.MsgDisablePool],
    ["/kyve.pool.v1beta1.MsgEnablePool", tx_12.MsgEnablePool],
    ["/kyve.pool.v1beta1.MsgScheduleRuntimeUpgrade", tx_13.MsgScheduleRuntimeUpgrade],
    ["/kyve.pool.v1beta1.MsgCancelRuntimeUpgrade", tx_14.MsgCancelRuntimeUpgrade],
    /** funders **/
    ["/kyve.funders.v1beta1.MsgCreateFunder", tx_20.MsgCreateFunder],
    ["/kyve.funders.v1beta1.MsgUpdateFunder", tx_21.MsgUpdateFunder],
    ["/kyve.funders.v1beta1.MsgFundPool", tx_22.MsgFundPool],
    ["/kyve.funders.v1beta1.MsgDefundPool", tx_23.MsgDefundPool],
    /** stakers **/
    ["/kyve.stakers.v1.MsgUpdateCommission", tx_16.MsgUpdateCommission],
    ["/kyve.stakers.v1.MsgUpdateStakeFraction", tx_17.MsgUpdateStakeFraction],
    ["/kyve.stakers.v1.MsgJoinPool", tx_15.MsgJoinPool],
    ["/kyve.stakers.v1.MsgLeavePool", tx_18.MsgLeavePool],
    /** bundles **/
    ["/kyve.bundles.v1beta1.MsgSubmitBundleProposal", tx_3.MsgSubmitBundleProposal],
    ["/kyve.bundles.v1beta1.MsgVoteBundleProposal", tx_4.MsgVoteBundleProposal],
    ["/kyve.bundles.v1beta1.MsgClaimUploaderRole", tx_5.MsgClaimUploaderRole],
    ["/kyve.bundles.v1beta1.MsgSkipUploaderRole", tx_6.MsgSkipUploaderRole],
    /** multi_coin_rewards **/
    [
        "/kyve.multi_coin_rewards.v1beta1.MsgSetMultiCoinRewardsDistributionPolicy",
        tx_26.MsgSetMultiCoinRewardsDistributionPolicy,
    ],
    [
        "/kyve.multi_coin_rewards.v1beta1.MsgToggleMultiCoinRewards",
        tx_27.MsgToggleMultiCoinRewards,
    ],
    /** cosmos **/
    ["/cosmos.gov.v1.MsgSubmitProposal", tx_1.MsgSubmitProposal],
    ["/cosmos.gov.v1.MsgVote", tx_2.MsgVote],
], false);
var load = function (protoRegistry) {
    exports.registry.forEach(function (_a) {
        var typeUrl = _a[0], mod = _a[1];
        protoRegistry.register(typeUrl, mod);
    });
};
exports.load = load;
exports.encodeTxMsg = {
    createFunder: function (value) {
        return {
            type_url: "/kyve.funders.v1beta1.MsgCreateFunder",
            value: tx_20.MsgCreateFunder.encode(value).finish(),
        };
    },
    updateFunder: function (value) {
        return {
            type_url: "/kyve.funders.v1beta1.MsgUpdateFunder",
            value: tx_21.MsgUpdateFunder.encode(value).finish(),
        };
    },
    fundPool: function (value) {
        return {
            type_url: "/kyve.funders.v1beta1.MsgFundPool",
            value: tx_22.MsgFundPool.encode(value).finish(),
        };
    },
    defundPool: function (value) {
        return {
            type_url: "/kyve.funders.v1beta1.MsgDefundPool",
            value: tx_23.MsgDefundPool.encode(value).finish(),
        };
    },
    createPool: function (value) {
        return {
            type_url: "/kyve.pool.v1beta1.MsgCreatePool",
            value: tx_9.MsgCreatePool.encode(value).finish(),
        };
    },
    updatePool: function (value) {
        return {
            type_url: "/kyve.pool.v1beta1.MsgUpdatePool",
            value: tx_10.MsgUpdatePool.encode(value).finish(),
        };
    },
    disablePool: function (value) {
        return {
            type_url: "/kyve.pool.v1beta1.MsgDisablePool",
            value: tx_11.MsgDisablePool.encode(value).finish(),
        };
    },
    enablePool: function (value) {
        return {
            type_url: "/kyve.pool.v1beta1.MsgEnablePool",
            value: tx_12.MsgEnablePool.encode(value).finish(),
        };
    },
    scheduleRuntimeUpgrade: function (value) {
        return {
            type_url: "/kyve.pool.v1beta1.MsgScheduleRuntimeUpgrade",
            value: tx_13.MsgScheduleRuntimeUpgrade.encode(value).finish(),
        };
    },
    cancelRuntimeUpgrade: function (value) {
        return {
            type_url: "/kyve.pool.v1beta1.MsgCancelRuntimeUpgrade",
            value: tx_14.MsgCancelRuntimeUpgrade.encode(value).finish(),
        };
    },
    updateCommission: function (value) {
        return {
            type_url: "/kyve.stakers.v1.MsgUpdateCommission",
            value: tx_16.MsgUpdateCommission.encode(value).finish(),
        };
    },
    updateStakeFraction: function (value) {
        return {
            type_url: "/kyve.stakers.v1.MsgUpdateStakeFraction",
            value: tx_17.MsgUpdateStakeFraction.encode(value).finish(),
        };
    },
    joinPool: function (value) {
        return {
            type_url: "/kyve.stakers.v1.MsgJoinPool",
            value: tx_15.MsgJoinPool.encode(value).finish(),
        };
    },
    leavePool: function (value) {
        return {
            type_url: "/kyve.stakers.v1.MsgLeavePool",
            value: tx_18.MsgLeavePool.encode(value).finish(),
        };
    },
    submitBundleProposal: function (value) {
        return {
            type_url: "/kyve.bundles.v1beta1.MsgSubmitBundleProposal",
            value: tx_3.MsgSubmitBundleProposal.encode(value).finish(),
        };
    },
    voteBundleProposal: function (value) {
        return {
            type_url: "/kyve.bundles.v1beta1.MsgVoteBundleProposal",
            value: tx_4.MsgVoteBundleProposal.encode(value).finish(),
        };
    },
    claimUploaderRole: function (value) {
        return {
            type_url: "/kyve.bundles.v1beta1.MsgClaimUploaderRole",
            value: tx_5.MsgClaimUploaderRole.encode(value).finish(),
        };
    },
    updateParamsStakers: function (value) {
        return {
            type_url: "/kyve.stakers.v1.MsgUpdateParams",
            value: tx_19.MsgUpdateParams.encode(value).finish(),
        };
    },
    updateParamsBundles: function (value) {
        return {
            type_url: "/kyve.bundles.v1beta1.MsgUpdateParams",
            value: tx_7.MsgUpdateParams.encode(value).finish(),
        };
    },
    updateParamsGlobal: function (value) {
        return {
            type_url: "/kyve.global.v1beta1.MsgUpdateParams",
            value: tx_8.MsgUpdateParams.encode(value).finish(),
        };
    },
    updateParamsMultiCoinRewards: function (value) {
        return {
            type_url: "/kyve.multi_coin_rewards.v1beta1.MsgUpdateParamsMultiCoinRewards",
            value: tx_28.MsgUpdateParams.encode(value).finish(),
        };
    },
    delegate: function (value) {
        return {
            type_url: "/cosmos.staking.v1beta1.MsgDelegate",
            value: tx_25.MsgDelegate.encode(value).finish(),
        };
    },
    undelegate: function (value) {
        return {
            type_url: "/cosmos.staking.v1beta1.MsgUndelegate",
            value: tx_25.MsgUndelegate.encode(value).finish(),
        };
    },
    cancelUnbonding: function (value) {
        return {
            type_url: "/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation",
            value: tx_25.MsgCancelUnbondingDelegation.encode(value).finish(),
        };
    },
    redelegate: function (value) {
        return {
            type_url: "/cosmos.staking.v1beta1.MsgBeginRedelegate",
            value: tx_25.MsgBeginRedelegate.encode(value).finish(),
        };
    },
    createValidator: function (value) {
        return {
            type_url: "/cosmos.staking.v1beta1.MsgCreateValidator",
            value: tx_25.MsgCreateValidator.encode(value).finish(),
        };
    },
    editValidator: function (value) {
        return {
            type_url: "/cosmos.staking.v1beta1.MsgEditValidator",
            value: tx_25.MsgEditValidator.encode(value).finish(),
        };
    },
    withdrawDelegatorReward: function (value) {
        return {
            type_url: "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward",
            value: tx_24.MsgWithdrawDelegatorReward.encode(value).finish(),
        };
    },
    withdrawValidatorCommission: function (value) {
        return {
            type_url: "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission",
            value: tx_24.MsgWithdrawValidatorCommission.encode(value).finish(),
        };
    },
    setMultiCoinRewardsDistributionPolicy: function (value) {
        return {
            type_url: "/kyve.multi_coin_rewards.v1beta1.MsgSetMultiCoinRewardsDistributionPolicy",
            value: tx_26.MsgSetMultiCoinRewardsDistributionPolicy.encode(value).finish(),
        };
    },
    toggleMultiCoinRewards: function (value) {
        return {
            type_url: "/kyve.multi_coin_rewards.v1beta1.MsgToggleMultiCoinRewards",
            value: tx_27.MsgToggleMultiCoinRewards.encode(value).finish(),
        };
    },
};
exports.withTypeUrl = {
    createFunder: function (value) {
        return {
            typeUrl: "/kyve.funders.v1beta1.MsgCreateFunder",
            value: value,
        };
    },
    updateFunder: function (value) {
        return {
            typeUrl: "/kyve.funders.v1beta1.MsgUpdateFunder",
            value: value,
        };
    },
    fundPool: function (value) {
        return {
            typeUrl: "/kyve.funders.v1beta1.MsgFundPool",
            value: value,
        };
    },
    defundPool: function (value) {
        return {
            typeUrl: "/kyve.funders.v1beta1.MsgDefundPool",
            value: value,
        };
    },
    createPool: function (value) {
        return {
            typeUrl: "/kyve.pool.v1beta1.MsgCreatePool",
            value: value,
        };
    },
    updatePool: function (value) {
        return {
            typeUrl: "/kyve.pool.v1beta1.MsgUpdatePool",
            value: value,
        };
    },
    disablePool: function (value) {
        return {
            typeUrl: "/kyve.pool.v1beta1.MsgDisablePool",
            value: value,
        };
    },
    enablePool: function (value) {
        return {
            typeUrl: "/kyve.pool.v1beta1.MsgEnablePool",
            value: value,
        };
    },
    scheduleRuntimeUpgrade: function (value) {
        return {
            typeUrl: "/kyve.pool.v1beta1.MsgScheduleRuntimeUpgrade",
            value: value,
        };
    },
    cancelRuntimeUpgrade: function (value) {
        return {
            typeUrl: "/kyve.pool.v1beta1.MsgCancelRuntimeUpgrade",
            value: value,
        };
    },
    updateCommission: function (value) {
        return {
            typeUrl: "/kyve.stakers.v1.MsgUpdateCommission",
            value: value,
        };
    },
    updateStakeFraction: function (value) {
        return {
            typeUrl: "/kyve.stakers.v1.MsgUpdateStakeFraction",
            value: value,
        };
    },
    joinPool: function (value) {
        return {
            typeUrl: "/kyve.stakers.v1.MsgJoinPool",
            value: value,
        };
    },
    leavePool: function (value) {
        return {
            typeUrl: "/kyve.stakers.v1.MsgLeavePool",
            value: value,
        };
    },
    submitBundleProposal: function (value) {
        return {
            typeUrl: "/kyve.bundles.v1beta1.MsgSubmitBundleProposal",
            value: value,
        };
    },
    voteBundleProposal: function (value) {
        return {
            typeUrl: "/kyve.bundles.v1beta1.MsgVoteBundleProposal",
            value: value,
        };
    },
    skipUploaderRole: function (value) {
        return {
            typeUrl: "/kyve.bundles.v1beta1.MsgSkipUploaderRole",
            value: value,
        };
    },
    claimUploaderRole: function (value) {
        return {
            typeUrl: "/kyve.bundles.v1beta1.MsgClaimUploaderRole",
            value: value,
        };
    },
    updateParamsStakers: function (value) {
        return {
            typeUrl: "/kyve.stakers.v1.MsgUpdateParams",
            value: value,
        };
    },
    updateParamsBundles: function (value) {
        return {
            typeUrl: "/kyve.bundles.v1beta1.MsgUpdateParams",
            value: value,
        };
    },
    updateParamsGlobal: function (value) {
        return {
            typeUrl: "/kyve.global.v1beta1.MsgUpdateParams",
            value: value,
        };
    },
    updateParamsMultiCoinRewards: function (value) {
        return {
            typeUrl: "/kyve.multi_coin_rewards.v1beta1.MsgUpdateParamsMultiCoinRewards",
            value: value,
        };
    },
    delegate: function (value) {
        return {
            typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
            value: value,
        };
    },
    undelegate: function (value) {
        return {
            typeUrl: "/cosmos.staking.v1beta1.MsgUndelegate",
            value: value,
        };
    },
    cancelUnbonding: function (value) {
        return {
            typeUrl: "/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation",
            value: value,
        };
    },
    redelegate: function (value) {
        return {
            typeUrl: "/cosmos.staking.v1beta1.MsgBeginRedelegate",
            value: value,
        };
    },
    createValidator: function (value) {
        return {
            typeUrl: "/cosmos.staking.v1beta1.MsgCreateValidator",
            value: value,
        };
    },
    editValidator: function (value) {
        return {
            typeUrl: "/cosmos.staking.v1beta1.MsgEditValidator",
            value: value,
        };
    },
    withdrawDelegatorReward: function (value) {
        return {
            typeUrl: "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward",
            value: value,
        };
    },
    withdrawValidatorCommission: function (value) {
        return {
            typeUrl: "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission",
            value: value,
        };
    },
    setMultiCoinRewardsDistributionPolicy: function (value) {
        return {
            typeUrl: "/kyve.multi_coin_rewards.v1beta1.MsgSetMultiCoinRewardsDistributionPolicy",
            value: value,
        };
    },
    toggleMultiCoinRewards: function (value) {
        return {
            typeUrl: "/kyve.multi_coin_rewards.v1beta1.MsgToggleMultiCoinRewards",
            value: value,
        };
    },
};
//# sourceMappingURL=tx.registry.js.map