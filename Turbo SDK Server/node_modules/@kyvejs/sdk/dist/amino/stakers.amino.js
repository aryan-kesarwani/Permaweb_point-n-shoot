"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStakersAminoConverters = void 0;
var utils_1 = require("../utils");
var createStakersAminoConverters = function () {
    return {
        "/kyve.stakers.v1.MsgUpdateCommission": {
            aminoType: "/kyve.stakers.v1.MsgUpdateCommission",
            toAmino: function (msg) { return (__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id })), { commission: msg.commission })); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                pool_id: msg.pool_id,
                commission: msg.commission,
            }); },
        },
        "/kyve.stakers.v1.MsgUpdateStakeFraction": {
            aminoType: "/kyve.stakers.v1.MsgUpdateStakeFraction",
            toAmino: function (msg) { return (__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id })), { stake_fraction: msg.stake_fraction })); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                pool_id: msg.pool_id,
                stake_fraction: msg.stake_fraction,
            }); },
        },
        "/kyve.stakers.v1.MsgJoinPool": {
            aminoType: "/kyve.stakers.v1.MsgJoinPool",
            toAmino: function (msg) { return (__assign(__assign(__assign(__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id })), { pool_address: msg.pool_address }), ((0, utils_1.isNotEmpty)(msg.amount) && { amount: msg.amount })), { commission: msg.commission, stake_fraction: msg.stake_fraction })); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                pool_id: msg.pool_id,
                pool_address: msg.pool_address,
                amount: msg.amount,
                commission: msg.commission,
                stake_fraction: msg.stake_fraction,
            }); },
        },
        "/kyve.stakers.v1.MsgLeavePool": {
            aminoType: "/kyve.stakers.v1.MsgLeavePool",
            toAmino: function (msg) { return (__assign({ creator: msg.creator }, ((0, utils_1.isNotEmpty)(msg.pool_id) && { pool_id: msg.pool_id }))); },
            fromAmino: function (msg) { return ({
                creator: msg.creator,
                pool_id: msg.pool_id,
            }); },
        },
    };
};
exports.createStakersAminoConverters = createStakersAminoConverters;
//# sourceMappingURL=stakers.amino.js.map