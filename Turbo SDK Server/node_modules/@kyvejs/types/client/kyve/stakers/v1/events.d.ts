import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";
import { SlashType } from "./stakers";
export declare const protobufPackage = "kyve.stakers.v1";
/**
 * EventUpdateParams is an event emitted when the module parameters are updated.
 * emitted_by: MsgUpdateParams
 */
export interface EventUpdateParams {
    /** old_params is the module's old parameters. */
    old_params?: Params | undefined;
    /** new_params is the module's new parameters. */
    new_params?: Params | undefined;
    /** payload is the parameter updates that were performed. */
    payload: string;
}
/**
 * EventUpdateCommission ...
 * emitted_by: EndBlock
 */
export interface EventUpdateCommission {
    /** staker is the account address of the protocol node. */
    staker: string;
    /** pool_id ... */
    pool_id: string;
    /** commission ... */
    commission: string;
}
/**
 * EventUpdateCommission ...
 * emitted_by: MsgUpdateStakeFraction, EndBlock
 */
export interface EventUpdateStakeFraction {
    /** staker is the account address of the protocol node. */
    staker: string;
    /** pool_id ... */
    pool_id: string;
    /** stake_fraction ... */
    stake_fraction: string;
}
/**
 * EventClaimCommissionRewards ...
 * emitted_by: MsgClaimCommissionRewards
 */
export interface EventClaimCommissionRewards {
    /** staker is the account address of the protocol node. */
    staker: string;
    /** amounts is the amount of the commission rewards claimed */
    amounts: string;
}
/**
 * EventJoinPool ...
 * emitted_by: MsgJoinPool
 */
export interface EventJoinPool {
    /** pool_id is the pool the staker joined */
    pool_id: string;
    /** staker is the address of the staker */
    staker: string;
    /**
     * pool_address is the address of the protocol node which
     * votes in favor of the staker
     */
    pool_address: string;
    /** amount is the amount of funds transferred to the pool address */
    amount: string;
    /** commission ... */
    commission: string;
    /** stake_fraction ... */
    stake_fraction: string;
}
/**
 * EventLeavePool ...
 * emitted_by: EndBlock
 */
export interface EventLeavePool {
    /** pool_id ... */
    pool_id: string;
    /** staker ... */
    staker: string;
}
/**
 * EventSlash is an event emitted when a protocol node is slashed.
 * emitted_by: MsgSubmitBundleProposal, EndBlock
 */
export interface EventSlash {
    /** pool_id is the unique ID of the pool. */
    pool_id: string;
    /** staker is the account address of the protocol node. */
    staker: string;
    /** amount is the total amount that got slashed */
    amount: string;
    /** slash_type is the type of the protocol slash */
    slash_type: SlashType;
    /**
     * stake_fraction is the percentage of how much of the validators total
     * bonded amount was under risk for slashing
     */
    stake_fraction: string;
}
export declare const EventUpdateParams: MessageFns<EventUpdateParams>;
export declare const EventUpdateCommission: MessageFns<EventUpdateCommission>;
export declare const EventUpdateStakeFraction: MessageFns<EventUpdateStakeFraction>;
export declare const EventClaimCommissionRewards: MessageFns<EventClaimCommissionRewards>;
export declare const EventJoinPool: MessageFns<EventJoinPool>;
export declare const EventLeavePool: MessageFns<EventLeavePool>;
export declare const EventSlash: MessageFns<EventSlash>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
