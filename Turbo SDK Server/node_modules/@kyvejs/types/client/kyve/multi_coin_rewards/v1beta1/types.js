"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/multi_coin_rewards/v1beta1/types.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiCoinDistributionPoolWeightEntry = exports.MultiCoinDistributionDenomEntry = exports.MultiCoinDistributionPolicy = exports.MultiCoinPendingRewardsEntry = exports.QueueState = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "kyve.multi_coin_rewards.v1beta1";
function createBaseQueueState() {
    return { low_index: "0", high_index: "0" };
}
exports.QueueState = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.low_index !== "0") {
            writer.uint32(8).uint64(message.low_index);
        }
        if (message.high_index !== "0") {
            writer.uint32(16).uint64(message.high_index);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueueState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.low_index = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.high_index = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            low_index: isSet(object.low_index) ? globalThis.String(object.low_index) : "0",
            high_index: isSet(object.high_index) ? globalThis.String(object.high_index) : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.low_index !== "0") {
            obj.low_index = message.low_index;
        }
        if (message.high_index !== "0") {
            obj.high_index = message.high_index;
        }
        return obj;
    },
    create: function (base) {
        return exports.QueueState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueueState();
        message.low_index = (_a = object.low_index) !== null && _a !== void 0 ? _a : "0";
        message.high_index = (_b = object.high_index) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseMultiCoinPendingRewardsEntry() {
    return { index: "0", address: "", rewards: [], creation_date: "0" };
}
exports.MultiCoinPendingRewardsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.index !== "0") {
            writer.uint32(8).uint64(message.index);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        for (var _i = 0, _a = message.rewards; _i < _a.length; _i++) {
            var v = _a[_i];
            coin_1.Coin.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.creation_date !== "0") {
            writer.uint32(32).int64(message.creation_date);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMultiCoinPendingRewardsEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.index = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.rewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.creation_date = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            index: isSet(object.index) ? globalThis.String(object.index) : "0",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            rewards: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.rewards) ? object.rewards.map(function (e) { return coin_1.Coin.fromJSON(e); }) : [],
            creation_date: isSet(object.creation_date) ? globalThis.String(object.creation_date) : "0",
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if (message.index !== "0") {
            obj.index = message.index;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if ((_a = message.rewards) === null || _a === void 0 ? void 0 : _a.length) {
            obj.rewards = message.rewards.map(function (e) { return coin_1.Coin.toJSON(e); });
        }
        if (message.creation_date !== "0") {
            obj.creation_date = message.creation_date;
        }
        return obj;
    },
    create: function (base) {
        return exports.MultiCoinPendingRewardsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseMultiCoinPendingRewardsEntry();
        message.index = (_a = object.index) !== null && _a !== void 0 ? _a : "0";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.rewards = ((_c = object.rewards) === null || _c === void 0 ? void 0 : _c.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        message.creation_date = (_d = object.creation_date) !== null && _d !== void 0 ? _d : "0";
        return message;
    },
};
function createBaseMultiCoinDistributionPolicy() {
    return { entries: [] };
}
exports.MultiCoinDistributionPolicy = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        for (var _i = 0, _a = message.entries; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.MultiCoinDistributionDenomEntry.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMultiCoinDistributionPolicy();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.entries.push(exports.MultiCoinDistributionDenomEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            entries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.entries)
                ? object.entries.map(function (e) { return exports.MultiCoinDistributionDenomEntry.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if ((_a = message.entries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.entries = message.entries.map(function (e) { return exports.MultiCoinDistributionDenomEntry.toJSON(e); });
        }
        return obj;
    },
    create: function (base) {
        return exports.MultiCoinDistributionPolicy.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseMultiCoinDistributionPolicy();
        message.entries = ((_a = object.entries) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.MultiCoinDistributionDenomEntry.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMultiCoinDistributionDenomEntry() {
    return { denom: "", pool_weights: [] };
}
exports.MultiCoinDistributionDenomEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        for (var _i = 0, _a = message.pool_weights; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.MultiCoinDistributionPoolWeightEntry.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMultiCoinDistributionDenomEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pool_weights.push(exports.MultiCoinDistributionPoolWeightEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            pool_weights: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pool_weights)
                ? object.pool_weights.map(function (e) { return exports.MultiCoinDistributionPoolWeightEntry.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if ((_a = message.pool_weights) === null || _a === void 0 ? void 0 : _a.length) {
            obj.pool_weights = message.pool_weights.map(function (e) { return exports.MultiCoinDistributionPoolWeightEntry.toJSON(e); });
        }
        return obj;
    },
    create: function (base) {
        return exports.MultiCoinDistributionDenomEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMultiCoinDistributionDenomEntry();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.pool_weights = ((_b = object.pool_weights) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.MultiCoinDistributionPoolWeightEntry.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMultiCoinDistributionPoolWeightEntry() {
    return { pool_id: "0", weight: "" };
}
exports.MultiCoinDistributionPoolWeightEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.pool_id !== "0") {
            writer.uint32(8).uint64(message.pool_id);
        }
        if (message.weight !== "") {
            writer.uint32(18).string(message.weight);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMultiCoinDistributionPoolWeightEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
            weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        return obj;
    },
    create: function (base) {
        return exports.MultiCoinDistributionPoolWeightEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMultiCoinDistributionPoolWeightEntry();
        message.pool_id = (_a = object.pool_id) !== null && _a !== void 0 ? _a : "0";
        message.weight = (_b = object.weight) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map