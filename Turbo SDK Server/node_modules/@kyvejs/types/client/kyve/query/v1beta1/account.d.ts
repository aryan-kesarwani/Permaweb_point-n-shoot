import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { BasicPool, FullStaker } from "./query";
export declare const protobufPackage = "kyve.query.v1beta1";
/** QueryAccountAssetsRequest is the request type for the Query/AccountAssets RPC method. */
export interface QueryAccountAssetsRequest {
    /** address ... */
    address: string;
}
/** QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method. */
export interface QueryAccountAssetsResponse {
    /** balance ... */
    balance: string;
    /** delegation is the amount in $KYVE this account has in total delegated ... */
    delegation: string;
    /** delegation_unbonding is the amount in $KYVE this account has in total currently unbonding ... */
    delegation_unbonding: string;
    /** delegation_rewards are the current unclaimed delegation rewards */
    delegation_rewards: Coin[];
    /** commission_rewards are the current unclaimed commission rewards */
    commission_rewards: Coin[];
    /** protocol_funding ... */
    protocol_funding: Coin[];
}
/** QueryAccountFundedListRequest ... */
export interface QueryAccountDelegationUnbondingsRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
    /** address ... */
    address: string;
}
/** QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method. */
export interface QueryAccountDelegationUnbondingsResponse {
    /** balance ... */
    unbondings: DelegationUnbonding[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
/** QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method. */
export interface DelegationUnbonding {
    /** amount */
    amount: string;
    /** creation_time */
    creation_time: string;
    /** staker */
    staker?: FullStaker | undefined;
}
/** QueryAccountFundedListRequest is the request type for the account queries with pagination */
export interface QueryAccountFundedListRequest {
    /** address ... */
    address: string;
}
/** QueryAccountFundedListResponse is the response type for the Query/AccountFundedList RPC method. */
export interface QueryAccountFundedListResponse {
    /** funded ... */
    funded: Funded[];
}
/** Funded ... */
export interface Funded {
    /** amounts ... */
    amounts: Coin[];
    /** pool ... */
    pool?: BasicPool | undefined;
}
/** QueryAccountDelegationListRequest ... */
export interface QueryAccountRedelegationRequest {
    /** address ... */
    address: string;
}
/** QueryAccountDelegationListRequest is the response type for the Query/AccountDelegationList RPC method. */
export interface QueryAccountRedelegationResponse {
    /** redelegation_cooldown_entries ... */
    redelegation_cooldown_entries: RedelegationEntry[];
    /** availableSlots ... */
    available_slots: string;
}
/** RedelegationEntry ... */
export interface RedelegationEntry {
    /** creation_date ... */
    creation_date: string;
    /** finish_date ... */
    finish_date: string;
}
export declare const QueryAccountAssetsRequest: MessageFns<QueryAccountAssetsRequest>;
export declare const QueryAccountAssetsResponse: MessageFns<QueryAccountAssetsResponse>;
export declare const QueryAccountDelegationUnbondingsRequest: MessageFns<QueryAccountDelegationUnbondingsRequest>;
export declare const QueryAccountDelegationUnbondingsResponse: MessageFns<QueryAccountDelegationUnbondingsResponse>;
export declare const DelegationUnbonding: MessageFns<DelegationUnbonding>;
export declare const QueryAccountFundedListRequest: MessageFns<QueryAccountFundedListRequest>;
export declare const QueryAccountFundedListResponse: MessageFns<QueryAccountFundedListResponse>;
export declare const Funded: MessageFns<Funded>;
export declare const QueryAccountRedelegationRequest: MessageFns<QueryAccountRedelegationRequest>;
export declare const QueryAccountRedelegationResponse: MessageFns<QueryAccountRedelegationResponse>;
export declare const RedelegationEntry: MessageFns<RedelegationEntry>;
/** QueryDelegation contains all rpc requests related to direct delegation data */
export interface QueryAccount {
    /** AccountAssets returns an overview of the sum of all balances for a given user. e.g. balance, staking, funding, etc. */
    AccountAssets(request: QueryAccountAssetsRequest): Promise<QueryAccountAssetsResponse>;
    /** AccountFundedList returns all pools the given user has funded into. */
    AccountFundedList(request: QueryAccountFundedListRequest): Promise<QueryAccountFundedListResponse>;
}
export declare const QueryAccountServiceName = "kyve.query.v1beta1.QueryAccount";
export declare class QueryAccountClientImpl implements QueryAccount {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AccountAssets(request: QueryAccountAssetsRequest): Promise<QueryAccountAssetsResponse>;
    AccountFundedList(request: QueryAccountFundedListRequest): Promise<QueryAccountFundedListResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
