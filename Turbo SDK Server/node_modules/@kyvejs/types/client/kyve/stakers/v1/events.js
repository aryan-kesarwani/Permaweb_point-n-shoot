"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/stakers/v1/events.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSlash = exports.EventLeavePool = exports.EventJoinPool = exports.EventClaimCommissionRewards = exports.EventUpdateStakeFraction = exports.EventUpdateCommission = exports.EventUpdateParams = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var params_1 = require("./params");
var stakers_1 = require("./stakers");
exports.protobufPackage = "kyve.stakers.v1";
function createBaseEventUpdateParams() {
    return { old_params: undefined, new_params: undefined, payload: "" };
}
exports.EventUpdateParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.old_params !== undefined) {
            params_1.Params.encode(message.old_params, writer.uint32(10).fork()).join();
        }
        if (message.new_params !== undefined) {
            params_1.Params.encode(message.new_params, writer.uint32(18).fork()).join();
        }
        if (message.payload !== "") {
            writer.uint32(26).string(message.payload);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventUpdateParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.old_params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.new_params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.payload = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            old_params: isSet(object.old_params) ? params_1.Params.fromJSON(object.old_params) : undefined,
            new_params: isSet(object.new_params) ? params_1.Params.fromJSON(object.new_params) : undefined,
            payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.old_params !== undefined) {
            obj.old_params = params_1.Params.toJSON(message.old_params);
        }
        if (message.new_params !== undefined) {
            obj.new_params = params_1.Params.toJSON(message.new_params);
        }
        if (message.payload !== "") {
            obj.payload = message.payload;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventUpdateParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseEventUpdateParams();
        message.old_params = (object.old_params !== undefined && object.old_params !== null)
            ? params_1.Params.fromPartial(object.old_params)
            : undefined;
        message.new_params = (object.new_params !== undefined && object.new_params !== null)
            ? params_1.Params.fromPartial(object.new_params)
            : undefined;
        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseEventUpdateCommission() {
    return { staker: "", pool_id: "0", commission: "" };
}
exports.EventUpdateCommission = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.staker !== "") {
            writer.uint32(10).string(message.staker);
        }
        if (message.pool_id !== "0") {
            writer.uint32(16).uint64(message.pool_id);
        }
        if (message.commission !== "") {
            writer.uint32(26).string(message.commission);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventUpdateCommission();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.staker = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.commission = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            staker: isSet(object.staker) ? globalThis.String(object.staker) : "",
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
            commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.staker !== "") {
            obj.staker = message.staker;
        }
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        if (message.commission !== "") {
            obj.commission = message.commission;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventUpdateCommission.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseEventUpdateCommission();
        message.staker = (_a = object.staker) !== null && _a !== void 0 ? _a : "";
        message.pool_id = (_b = object.pool_id) !== null && _b !== void 0 ? _b : "0";
        message.commission = (_c = object.commission) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseEventUpdateStakeFraction() {
    return { staker: "", pool_id: "0", stake_fraction: "" };
}
exports.EventUpdateStakeFraction = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.staker !== "") {
            writer.uint32(10).string(message.staker);
        }
        if (message.pool_id !== "0") {
            writer.uint32(16).uint64(message.pool_id);
        }
        if (message.stake_fraction !== "") {
            writer.uint32(26).string(message.stake_fraction);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventUpdateStakeFraction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.staker = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.stake_fraction = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            staker: isSet(object.staker) ? globalThis.String(object.staker) : "",
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
            stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.staker !== "") {
            obj.staker = message.staker;
        }
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        if (message.stake_fraction !== "") {
            obj.stake_fraction = message.stake_fraction;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventUpdateStakeFraction.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseEventUpdateStakeFraction();
        message.staker = (_a = object.staker) !== null && _a !== void 0 ? _a : "";
        message.pool_id = (_b = object.pool_id) !== null && _b !== void 0 ? _b : "0";
        message.stake_fraction = (_c = object.stake_fraction) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseEventClaimCommissionRewards() {
    return { staker: "", amounts: "" };
}
exports.EventClaimCommissionRewards = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.staker !== "") {
            writer.uint32(10).string(message.staker);
        }
        if (message.amounts !== "") {
            writer.uint32(18).string(message.amounts);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventClaimCommissionRewards();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.staker = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.amounts = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            staker: isSet(object.staker) ? globalThis.String(object.staker) : "",
            amounts: isSet(object.amounts) ? globalThis.String(object.amounts) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.staker !== "") {
            obj.staker = message.staker;
        }
        if (message.amounts !== "") {
            obj.amounts = message.amounts;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventClaimCommissionRewards.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseEventClaimCommissionRewards();
        message.staker = (_a = object.staker) !== null && _a !== void 0 ? _a : "";
        message.amounts = (_b = object.amounts) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEventJoinPool() {
    return { pool_id: "0", staker: "", pool_address: "", amount: "0", commission: "", stake_fraction: "" };
}
exports.EventJoinPool = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.pool_id !== "0") {
            writer.uint32(8).uint64(message.pool_id);
        }
        if (message.staker !== "") {
            writer.uint32(18).string(message.staker);
        }
        if (message.pool_address !== "") {
            writer.uint32(26).string(message.pool_address);
        }
        if (message.amount !== "0") {
            writer.uint32(32).uint64(message.amount);
        }
        if (message.commission !== "") {
            writer.uint32(42).string(message.commission);
        }
        if (message.stake_fraction !== "") {
            writer.uint32(50).string(message.stake_fraction);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventJoinPool();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.staker = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.pool_address = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.amount = reader.uint64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.commission = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.stake_fraction = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
            staker: isSet(object.staker) ? globalThis.String(object.staker) : "",
            pool_address: isSet(object.pool_address) ? globalThis.String(object.pool_address) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "0",
            commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
            stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        if (message.staker !== "") {
            obj.staker = message.staker;
        }
        if (message.pool_address !== "") {
            obj.pool_address = message.pool_address;
        }
        if (message.amount !== "0") {
            obj.amount = message.amount;
        }
        if (message.commission !== "") {
            obj.commission = message.commission;
        }
        if (message.stake_fraction !== "") {
            obj.stake_fraction = message.stake_fraction;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventJoinPool.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseEventJoinPool();
        message.pool_id = (_a = object.pool_id) !== null && _a !== void 0 ? _a : "0";
        message.staker = (_b = object.staker) !== null && _b !== void 0 ? _b : "";
        message.pool_address = (_c = object.pool_address) !== null && _c !== void 0 ? _c : "";
        message.amount = (_d = object.amount) !== null && _d !== void 0 ? _d : "0";
        message.commission = (_e = object.commission) !== null && _e !== void 0 ? _e : "";
        message.stake_fraction = (_f = object.stake_fraction) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseEventLeavePool() {
    return { pool_id: "0", staker: "" };
}
exports.EventLeavePool = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.pool_id !== "0") {
            writer.uint32(8).uint64(message.pool_id);
        }
        if (message.staker !== "") {
            writer.uint32(18).string(message.staker);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventLeavePool();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.staker = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
            staker: isSet(object.staker) ? globalThis.String(object.staker) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        if (message.staker !== "") {
            obj.staker = message.staker;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventLeavePool.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseEventLeavePool();
        message.pool_id = (_a = object.pool_id) !== null && _a !== void 0 ? _a : "0";
        message.staker = (_b = object.staker) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEventSlash() {
    return { pool_id: "0", staker: "", amount: "0", slash_type: 0, stake_fraction: "" };
}
exports.EventSlash = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.pool_id !== "0") {
            writer.uint32(8).uint64(message.pool_id);
        }
        if (message.staker !== "") {
            writer.uint32(18).string(message.staker);
        }
        if (message.amount !== "0") {
            writer.uint32(24).uint64(message.amount);
        }
        if (message.slash_type !== 0) {
            writer.uint32(32).int32(message.slash_type);
        }
        if (message.stake_fraction !== "") {
            writer.uint32(42).string(message.stake_fraction);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEventSlash();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.staker = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.amount = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.slash_type = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.stake_fraction = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
            staker: isSet(object.staker) ? globalThis.String(object.staker) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "0",
            slash_type: isSet(object.slash_type) ? (0, stakers_1.slashTypeFromJSON)(object.slash_type) : 0,
            stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        if (message.staker !== "") {
            obj.staker = message.staker;
        }
        if (message.amount !== "0") {
            obj.amount = message.amount;
        }
        if (message.slash_type !== 0) {
            obj.slash_type = (0, stakers_1.slashTypeToJSON)(message.slash_type);
        }
        if (message.stake_fraction !== "") {
            obj.stake_fraction = message.stake_fraction;
        }
        return obj;
    },
    create: function (base) {
        return exports.EventSlash.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseEventSlash();
        message.pool_id = (_a = object.pool_id) !== null && _a !== void 0 ? _a : "0";
        message.staker = (_b = object.staker) !== null && _b !== void 0 ? _b : "";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "0";
        message.slash_type = (_d = object.slash_type) !== null && _d !== void 0 ? _d : 0;
        message.stake_fraction = (_e = object.stake_fraction) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map