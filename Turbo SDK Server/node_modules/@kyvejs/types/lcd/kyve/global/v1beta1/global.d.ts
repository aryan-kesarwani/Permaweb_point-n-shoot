import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "kyve.global.v1beta1";
/** Params defines the global module parameters. */
export interface Params {
    /** min_gas_price defines the minimum gas price value for all transactions. */
    min_gas_price: string;
    /** burn_ratio defines the ratio of transaction fees burnt. */
    burn_ratio: string;
    /**
     * gas_adjustments can add a constant amount of gas to a specific message type.
     * This gives more control to make certain messages more expensive to avoid spamming
     * of certain types of messages.
     */
    gas_adjustments: GasAdjustment[];
    /**
     * gas_refunds lets the governance specify a fraction of how much gas
     * a user gets refunded for a certain type of transaction.
     * This could be used to make transactions which support to network cheaper.
     * Gas refunds only work if the transaction only included one message.
     */
    gas_refunds: GasRefund[];
}
/**
 * GasAdjustment stores for every message type a fixed amount
 * of gas which is added to the message
 */
export interface GasAdjustment {
    /** type of the sdk-message */
    type: string;
    /** amount of gas which is added to the message */
    amount: string;
}
/**
 * GasRefund stores the fraction of gas which will be refunded for a given
 * type of message.
 * This only works if the transaction only includes one message.
 */
export interface GasRefund {
    /** type of the sdk-message */
    type: string;
    /** fraction in decimal representation between 0 and 1 */
    fraction: string;
}
export declare const Params: MessageFns<Params>;
export declare const GasAdjustment: MessageFns<GasAdjustment>;
export declare const GasRefund: MessageFns<GasRefund>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
