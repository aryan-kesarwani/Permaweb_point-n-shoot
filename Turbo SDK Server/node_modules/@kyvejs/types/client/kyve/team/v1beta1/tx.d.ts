import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "kyve.team.v1beta1";
/** MsgClaimUnlockedTokens ... */
export interface MsgClaimUnlocked {
    /** authority is the foundation which is allowed to payout unlocked tokens */
    authority: string;
    /** id is the unique identifier of the team member */
    id: string;
    /** amount of $KYVE that will be paid to the recipient and marked as deducted from the unlocked amount. */
    amount: string;
    /** recipient is the recipient address chosen by the team member. */
    recipient: string;
}
/** MsgClaimUnlockedResponse defines the Msg/ClaimUnlockedTokens response type. */
export interface MsgClaimUnlockedResponse {
}
/** MsgClaimAuthorityRewards ... */
export interface MsgClaimAuthorityRewards {
    /** authority is the foundation which is allowed to payout unlocked tokens */
    authority: string;
    /** amount of $KYVE that will be paid to the recipient and marked as deducted from the authority inflation rewards */
    amount: string;
    /** recipient is the recipient address chosen by the team member. */
    recipient: string;
}
/** MsgClaimAuthorityRewardsResponse defines the Msg/ClaimAuthorityRewards response type. */
export interface MsgClaimAuthorityRewardsResponse {
}
/** MsgClaimAccountRewards ... */
export interface MsgClaimAccountRewards {
    /** authority is the foundation which is allowed to payout unlocked tokens */
    authority: string;
    /** id is the unique identifier of the team member */
    id: string;
    /** amount of $KYVE that will be paid to the recipient and marked as deducted from the inflation rewards */
    amount: string;
    /** recipient is the recipient address chosen by the team member. */
    recipient: string;
}
/** MsgClaimAccountRewardsResponse defines the Msg/ClaimAccountRewards response type. */
export interface MsgClaimAccountRewardsResponse {
}
/** MsgClawback ... */
export interface MsgClawback {
    /** authority is the foundation which is allowed to modify team accounts */
    authority: string;
    /** id is the unique identifier of the team member */
    id: string;
    /** clawback is a unix timestamp (in seconds) of when the clawback should be applied */
    clawback: string;
}
/** MsgClawbackResponse defines the Msg/Clawback response type. */
export interface MsgClawbackResponse {
}
/** MsgCreateTeamVestingAccount ... */
export interface MsgCreateTeamVestingAccount {
    /** authority ... */
    authority: string;
    /** total_allocation is the number of tokens reserved for this team member. */
    total_allocation: string;
    /** commencement is the unix timestamp of the member's official start date. */
    commencement: string;
}
/** MsgCreateTeamVestingAccountResponse defines the Msg/CreateTeamVestingAccount response type. */
export interface MsgCreateTeamVestingAccountResponse {
}
export declare const MsgClaimUnlocked: MessageFns<MsgClaimUnlocked>;
export declare const MsgClaimUnlockedResponse: MessageFns<MsgClaimUnlockedResponse>;
export declare const MsgClaimAuthorityRewards: MessageFns<MsgClaimAuthorityRewards>;
export declare const MsgClaimAuthorityRewardsResponse: MessageFns<MsgClaimAuthorityRewardsResponse>;
export declare const MsgClaimAccountRewards: MessageFns<MsgClaimAccountRewards>;
export declare const MsgClaimAccountRewardsResponse: MessageFns<MsgClaimAccountRewardsResponse>;
export declare const MsgClawback: MessageFns<MsgClawback>;
export declare const MsgClawbackResponse: MessageFns<MsgClawbackResponse>;
export declare const MsgCreateTeamVestingAccount: MessageFns<MsgCreateTeamVestingAccount>;
export declare const MsgCreateTeamVestingAccountResponse: MessageFns<MsgCreateTeamVestingAccountResponse>;
/** Msg defines the Msg service. */
export interface Msg {
    /** ClaimUnlocked ... */
    ClaimUnlocked(request: MsgClaimUnlocked): Promise<MsgClaimUnlockedResponse>;
    /** Clawback ... */
    Clawback(request: MsgClawback): Promise<MsgClawbackResponse>;
    /** CreateTeamVestingAccount ... */
    CreateTeamVestingAccount(request: MsgCreateTeamVestingAccount): Promise<MsgCreateTeamVestingAccountResponse>;
    /** ClaimAuthorityRewards ... */
    ClaimAuthorityRewards(request: MsgClaimAuthorityRewards): Promise<MsgClaimAuthorityRewardsResponse>;
    /** ClaimInflationRewards ... */
    ClaimAccountRewards(request: MsgClaimAccountRewards): Promise<MsgClaimAccountRewardsResponse>;
}
export declare const MsgServiceName = "kyve.team.v1beta1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ClaimUnlocked(request: MsgClaimUnlocked): Promise<MsgClaimUnlockedResponse>;
    Clawback(request: MsgClawback): Promise<MsgClawbackResponse>;
    CreateTeamVestingAccount(request: MsgCreateTeamVestingAccount): Promise<MsgCreateTeamVestingAccountResponse>;
    ClaimAuthorityRewards(request: MsgClaimAuthorityRewards): Promise<MsgClaimAuthorityRewardsResponse>;
    ClaimAccountRewards(request: MsgClaimAccountRewards): Promise<MsgClaimAccountRewardsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
