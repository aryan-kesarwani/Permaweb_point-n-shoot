import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";
export declare const protobufPackage = "kyve.funders.v1beta1";
/**
 * EventUpdateParams is an event emitted when the module parameters are updated.
 * emitted_by: MsgUpdateParams
 */
export interface EventUpdateParams {
    /** old_params is the module's old parameters. */
    old_params?: Params | undefined;
    /** new_params is the module's new parameters. */
    new_params?: Params | undefined;
    /** payload is the parameter updates that were performed. */
    payload: string;
}
/**
 * EventCreateFunder is an event emitted when a funder is created.
 * emitted_by: MsgCreateFunder
 */
export interface EventCreateFunder {
    /** address is the account address of the funder. */
    address: string;
    /** moniker ... */
    moniker: string;
    /** identity is the 64 bit keybase.io identity string */
    identity: string;
    /** website ... */
    website: string;
    /** contact ... */
    contact: string;
    /** description are some additional notes the funder finds important */
    description: string;
}
/**
 * EventUpdateFunder is an event emitted when a funder is created.
 * emitted_by: MsgCreateFunder
 */
export interface EventUpdateFunder {
    /** address is the account address of the funder. */
    address: string;
    /** moniker ... */
    moniker: string;
    /** identity is the 64 bit keybase.io identity string */
    identity: string;
    /** website ... */
    website: string;
    /** contact ... */
    contact: string;
    /** description are some additional notes the funder finds important */
    description: string;
}
/**
 * EventFundPool is an event emitted when a pool is funded.
 * emitted_by: MsgFundPool
 */
export interface EventFundPool {
    /** pool_id is the unique ID of the pool. */
    pool_id: string;
    /** address is the account address of the pool funder. */
    address: string;
    /** amounts is a list of coins the funder has funded */
    amounts: string;
    /** amounts_per_bundle is a list of coins the funder wants to distribute per finalized bundle */
    amounts_per_bundle: string;
}
/**
 * EventDefundPool is an event emitted when a pool is defunded.
 * emitted_by: MsgDefundPool
 */
export interface EventDefundPool {
    /** pool_id is the unique ID of the pool. */
    pool_id: string;
    /** address is the account address of the pool funder. */
    address: string;
    /** amounts is a list of coins that the funder wants to defund */
    amounts: string;
}
/**
 * EventPoolOutOfFunds is an event emitted when a pool has run out of funds
 * emitted_by: MsgSubmitBundleProposal
 */
export interface EventPoolOutOfFunds {
    /** pool_id is the unique ID of the pool. */
    pool_id: string;
}
export declare const EventUpdateParams: MessageFns<EventUpdateParams>;
export declare const EventCreateFunder: MessageFns<EventCreateFunder>;
export declare const EventUpdateFunder: MessageFns<EventUpdateFunder>;
export declare const EventFundPool: MessageFns<EventFundPool>;
export declare const EventDefundPool: MessageFns<EventDefundPool>;
export declare const EventPoolOutOfFunds: MessageFns<EventPoolOutOfFunds>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
