import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "kyve.stakers.v1";
/** MsgUpdateCommission ... */
export interface MsgUpdateCommission {
    /** creator ... */
    creator: string;
    /** pool_id ... */
    pool_id: string;
    /** commission ... */
    commission: string;
}
/** MsgUpdateCommissionResponse ... */
export interface MsgUpdateCommissionResponse {
}
/** MsgUpdateStakeFraction ... */
export interface MsgUpdateStakeFraction {
    /** creator ... */
    creator: string;
    /** pool_id ... */
    pool_id: string;
    /** commission ... */
    stake_fraction: string;
}
/** MsgUpdateStakeFractionResponse ... */
export interface MsgUpdateStakeFractionResponse {
}
/** MsgJoinPool ... */
export interface MsgJoinPool {
    /** creator ... */
    creator: string;
    /** pool_id ... */
    pool_id: string;
    /** pool_address ... */
    pool_address: string;
    /** amount ... */
    amount: string;
    /** commission ... */
    commission: string;
    /** stake_fraction ... */
    stake_fraction: string;
}
/** MsgJoinPoolResponse ... */
export interface MsgJoinPoolResponse {
}
/** MsgLeavePool ... */
export interface MsgLeavePool {
    /** creator ... */
    creator: string;
    /** pool_id ... */
    pool_id: string;
}
/** MsgReactivateStakerResponse ... */
export interface MsgLeavePoolResponse {
}
/** MsgUpdateParams defines a SDK message for updating the module parameters. */
export interface MsgUpdateParams {
    /** authority is the address of the governance account. */
    authority: string;
    /** payload defines the x/stakers parameters to update. */
    payload: string;
}
/** MsgUpdateParamsResponse defines the Msg/UpdateParams response type. */
export interface MsgUpdateParamsResponse {
}
export declare const MsgUpdateCommission: MessageFns<MsgUpdateCommission>;
export declare const MsgUpdateCommissionResponse: MessageFns<MsgUpdateCommissionResponse>;
export declare const MsgUpdateStakeFraction: MessageFns<MsgUpdateStakeFraction>;
export declare const MsgUpdateStakeFractionResponse: MessageFns<MsgUpdateStakeFractionResponse>;
export declare const MsgJoinPool: MessageFns<MsgJoinPool>;
export declare const MsgJoinPoolResponse: MessageFns<MsgJoinPoolResponse>;
export declare const MsgLeavePool: MessageFns<MsgLeavePool>;
export declare const MsgLeavePoolResponse: MessageFns<MsgLeavePoolResponse>;
export declare const MsgUpdateParams: MessageFns<MsgUpdateParams>;
export declare const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse>;
/** Msg defines the Msg service. */
export interface Msg {
    /** JoinPool ... */
    JoinPool(request: MsgJoinPool): Promise<MsgJoinPoolResponse>;
    /** LeavePool ... */
    LeavePool(request: MsgLeavePool): Promise<MsgLeavePoolResponse>;
    /** UpdateCommission ... */
    UpdateCommission(request: MsgUpdateCommission): Promise<MsgUpdateCommissionResponse>;
    /** UpdateStakeFraction ... */
    UpdateStakeFraction(request: MsgUpdateStakeFraction): Promise<MsgUpdateStakeFractionResponse>;
    /**
     * UpdateParams defines a governance operation for updating the x/stakers module
     * parameters. The authority is hard-coded to the x/gov module account.
     */
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
export declare const MsgServiceName = "kyve.stakers.v1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    JoinPool(request: MsgJoinPool): Promise<MsgJoinPoolResponse>;
    LeavePool(request: MsgLeavePool): Promise<MsgLeavePoolResponse>;
    UpdateCommission(request: MsgUpdateCommission): Promise<MsgUpdateCommissionResponse>;
    UpdateStakeFraction(request: MsgUpdateStakeFraction): Promise<MsgUpdateStakeFractionResponse>;
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
