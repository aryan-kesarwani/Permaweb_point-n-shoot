import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { BundleProposal } from "../../bundles/v1beta1/bundles";
import { Funding } from "../../funders/v1beta1/funders";
import { Pool, PoolStatus } from "../../pool/v1beta1/pool";
export declare const protobufPackage = "kyve.query.v1beta1";
/** QueryPoolsRequest is the request type for the Query/Pools RPC method. */
export interface QueryPoolsRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
    /** search ... */
    search: string;
    /** runtime ... */
    runtime: string;
    /** disabled ... */
    disabled: boolean;
    /** storage_provider_id ... */
    storage_provider_id: number;
}
/** QueryPoolsResponse is the response type for the Query/Pools RPC method. */
export interface QueryPoolsResponse {
    /** pools ... */
    pools: PoolResponse[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
/** PoolResponse ... */
export interface PoolResponse {
    /** id ... */
    id: string;
    /** data ... */
    data?: Pool | undefined;
    /** bundle_proposal ... */
    bundle_proposal?: BundleProposal | undefined;
    /** stakers ... */
    stakers: string[];
    /** total_stake ... */
    total_self_delegation: string;
    /** total_delegation ... */
    total_delegation: string;
    /** status ... */
    status: PoolStatus;
    /** account ... */
    account: string;
    /** account_balance ... */
    account_balance: string;
    /** funders ... */
    fundings: Funding[];
}
/** QueryPoolRequest is the request type for the Query/Pool RPC method. */
export interface QueryPoolRequest {
    /** id defines the unique ID of the pool. */
    id: string;
}
/** QueryPoolResponse is the response type for the Query/Pool RPC method. */
export interface QueryPoolResponse {
    /** pool ... */
    pool?: PoolResponse | undefined;
}
export declare const QueryPoolsRequest: MessageFns<QueryPoolsRequest>;
export declare const QueryPoolsResponse: MessageFns<QueryPoolsResponse>;
export declare const PoolResponse: MessageFns<PoolResponse>;
export declare const QueryPoolRequest: MessageFns<QueryPoolRequest>;
export declare const QueryPoolResponse: MessageFns<QueryPoolResponse>;
/** QueryPool ... */
export interface QueryPool {
    /** Pools queries for all pools. */
    Pools(request: QueryPoolsRequest): Promise<QueryPoolsResponse>;
    /** Pool queries a pool by its Id. */
    Pool(request: QueryPoolRequest): Promise<QueryPoolResponse>;
}
export declare const QueryPoolServiceName = "kyve.query.v1beta1.QueryPool";
export declare class QueryPoolClientImpl implements QueryPool {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Pools(request: QueryPoolsRequest): Promise<QueryPoolsResponse>;
    Pool(request: QueryPoolRequest): Promise<QueryPoolResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
