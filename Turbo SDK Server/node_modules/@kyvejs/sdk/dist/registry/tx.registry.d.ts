import { Registry } from "@cosmjs/proto-signing";
/** bundles **/
import { MsgSubmitBundleProposal } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
import { MsgVoteBundleProposal } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
import { MsgClaimUploaderRole } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
import { MsgSkipUploaderRole } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
import { MsgUpdateParams as MsgUpdateParamsBundles } from "@kyvejs/types/client/kyve/bundles/v1beta1/tx";
/** fees **/
import { MsgUpdateParams as MsgUpdateParamsGlobal } from "@kyvejs/types/client/kyve/global/v1beta1/tx";
import { MsgCreatePool } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgUpdatePool } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgDisablePool } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgEnablePool } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgScheduleRuntimeUpgrade } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
import { MsgCancelRuntimeUpgrade } from "@kyvejs/types/client/kyve/pool/v1beta1/tx";
/** stakers **/
import { MsgJoinPool } from "@kyvejs/types/client/kyve/stakers/v1/tx";
import { MsgUpdateCommission } from "@kyvejs/types/client/kyve/stakers/v1/tx";
import { MsgUpdateStakeFraction } from "@kyvejs/types/client/kyve/stakers/v1/tx";
import { MsgLeavePool } from "@kyvejs/types/client/kyve/stakers/v1/tx";
import { MsgUpdateParams as MsgUpdateParamsStakers } from "@kyvejs/types/client/kyve/stakers/v1/tx";
/** funders **/
import { MsgCreateFunder } from "@kyvejs/types/lcd/kyve/funders/v1beta1/tx";
import { MsgUpdateFunder } from "@kyvejs/types/lcd/kyve/funders/v1beta1/tx";
import { MsgFundPool } from "@kyvejs/types/client/kyve/funders/v1beta1/tx";
import { MsgDefundPool } from "@kyvejs/types/client/kyve/funders/v1beta1/tx";
import { MsgWithdrawDelegatorReward, MsgWithdrawValidatorCommission } from "cosmjs-types/cosmos/distribution/v1beta1/tx";
import { MsgBeginRedelegate, MsgCancelUnbondingDelegation, MsgCreateValidator, MsgDelegate, MsgEditValidator, MsgUndelegate } from "cosmjs-types/cosmos/staking/v1beta1/tx";
/** multi_coin_rewards **/
import { MsgSetMultiCoinRewardsDistributionPolicy } from "@kyvejs/types/client/kyve/multi_coin_rewards/v1beta1/tx";
import { MsgToggleMultiCoinRewards } from "@kyvejs/types/client/kyve/multi_coin_rewards/v1beta1/tx";
import { MsgUpdateParams as MsgUpdateParamsMultiCoinRewards } from "@kyvejs/types/client/kyve/multi_coin_rewards/v1beta1/tx";
export declare const registry: ReadonlyArray<[string, any]>;
export declare const load: (protoRegistry: Registry) => void;
export declare const encodeTxMsg: {
    createFunder(value: MsgCreateFunder): {
        type_url: string;
        value: Uint8Array;
    };
    updateFunder(value: MsgUpdateFunder): {
        type_url: string;
        value: Uint8Array;
    };
    fundPool(value: MsgFundPool): {
        type_url: string;
        value: Uint8Array;
    };
    defundPool(value: MsgDefundPool): {
        type_url: string;
        value: Uint8Array;
    };
    createPool(value: MsgCreatePool): {
        type_url: string;
        value: Uint8Array;
    };
    updatePool(value: MsgUpdatePool): {
        type_url: string;
        value: Uint8Array;
    };
    disablePool(value: MsgDisablePool): {
        type_url: string;
        value: Uint8Array;
    };
    enablePool(value: MsgEnablePool): {
        type_url: string;
        value: Uint8Array;
    };
    scheduleRuntimeUpgrade(value: MsgScheduleRuntimeUpgrade): {
        type_url: string;
        value: Uint8Array;
    };
    cancelRuntimeUpgrade(value: MsgCancelRuntimeUpgrade): {
        type_url: string;
        value: Uint8Array;
    };
    updateCommission(value: MsgUpdateCommission): {
        type_url: string;
        value: Uint8Array;
    };
    updateStakeFraction(value: MsgUpdateStakeFraction): {
        type_url: string;
        value: Uint8Array;
    };
    joinPool(value: MsgJoinPool): {
        type_url: string;
        value: Uint8Array;
    };
    leavePool(value: MsgJoinPool): {
        type_url: string;
        value: Uint8Array;
    };
    submitBundleProposal(value: MsgSubmitBundleProposal): {
        type_url: string;
        value: Uint8Array;
    };
    voteBundleProposal(value: MsgVoteBundleProposal): {
        type_url: string;
        value: Uint8Array;
    };
    claimUploaderRole(value: MsgClaimUploaderRole): {
        type_url: string;
        value: Uint8Array;
    };
    updateParamsStakers(value: MsgUpdateParamsStakers): {
        type_url: string;
        value: Uint8Array;
    };
    updateParamsBundles(value: MsgUpdateParamsBundles): {
        type_url: string;
        value: Uint8Array;
    };
    updateParamsGlobal(value: MsgUpdateParamsGlobal): {
        type_url: string;
        value: Uint8Array;
    };
    updateParamsMultiCoinRewards(value: MsgUpdateParamsMultiCoinRewards): {
        type_url: string;
        value: Uint8Array;
    };
    delegate(value: MsgDelegate): {
        type_url: string;
        value: Uint8Array;
    };
    undelegate(value: MsgUndelegate): {
        type_url: string;
        value: Uint8Array;
    };
    cancelUnbonding(value: MsgCancelUnbondingDelegation): {
        type_url: string;
        value: Uint8Array;
    };
    redelegate(value: MsgBeginRedelegate): {
        type_url: string;
        value: Uint8Array;
    };
    createValidator(value: MsgCreateValidator): {
        type_url: string;
        value: Uint8Array;
    };
    editValidator(value: MsgEditValidator): {
        type_url: string;
        value: Uint8Array;
    };
    withdrawDelegatorReward(value: MsgWithdrawDelegatorReward): {
        type_url: string;
        value: Uint8Array;
    };
    withdrawValidatorCommission(value: MsgWithdrawValidatorCommission): {
        type_url: string;
        value: Uint8Array;
    };
    setMultiCoinRewardsDistributionPolicy(value: MsgSetMultiCoinRewardsDistributionPolicy): {
        type_url: string;
        value: Uint8Array;
    };
    toggleMultiCoinRewards(value: MsgToggleMultiCoinRewards): {
        type_url: string;
        value: Uint8Array;
    };
};
export declare const withTypeUrl: {
    createFunder(value: MsgCreateFunder): {
        typeUrl: string;
        value: MsgCreateFunder;
    };
    updateFunder(value: MsgUpdateFunder): {
        typeUrl: string;
        value: MsgUpdateFunder;
    };
    fundPool(value: MsgFundPool): {
        typeUrl: string;
        value: MsgFundPool;
    };
    defundPool(value: MsgDefundPool): {
        typeUrl: string;
        value: MsgDefundPool;
    };
    createPool(value: MsgCreatePool): {
        typeUrl: string;
        value: MsgCreatePool;
    };
    updatePool(value: MsgUpdatePool): {
        typeUrl: string;
        value: MsgUpdatePool;
    };
    disablePool(value: MsgDisablePool): {
        typeUrl: string;
        value: MsgDisablePool;
    };
    enablePool(value: MsgEnablePool): {
        typeUrl: string;
        value: MsgEnablePool;
    };
    scheduleRuntimeUpgrade(value: MsgScheduleRuntimeUpgrade): {
        typeUrl: string;
        value: MsgScheduleRuntimeUpgrade;
    };
    cancelRuntimeUpgrade(value: MsgCancelRuntimeUpgrade): {
        typeUrl: string;
        value: MsgCancelRuntimeUpgrade;
    };
    updateCommission(value: MsgUpdateCommission): {
        typeUrl: string;
        value: MsgUpdateCommission;
    };
    updateStakeFraction(value: MsgUpdateStakeFraction): {
        typeUrl: string;
        value: MsgUpdateStakeFraction;
    };
    joinPool(value: MsgJoinPool): {
        typeUrl: string;
        value: MsgJoinPool;
    };
    leavePool(value: MsgLeavePool): {
        typeUrl: string;
        value: MsgLeavePool;
    };
    submitBundleProposal(value: MsgSubmitBundleProposal): {
        typeUrl: string;
        value: MsgSubmitBundleProposal;
    };
    voteBundleProposal(value: MsgVoteBundleProposal): {
        typeUrl: string;
        value: MsgVoteBundleProposal;
    };
    skipUploaderRole(value: MsgSkipUploaderRole): {
        typeUrl: string;
        value: MsgSkipUploaderRole;
    };
    claimUploaderRole(value: MsgClaimUploaderRole): {
        typeUrl: string;
        value: MsgClaimUploaderRole;
    };
    updateParamsStakers(value: MsgUpdateParamsStakers): {
        typeUrl: string;
        value: MsgUpdateParamsStakers;
    };
    updateParamsBundles(value: MsgUpdateParamsBundles): {
        typeUrl: string;
        value: MsgUpdateParamsBundles;
    };
    updateParamsGlobal(value: MsgUpdateParamsGlobal): {
        typeUrl: string;
        value: MsgUpdateParamsGlobal;
    };
    updateParamsMultiCoinRewards(value: MsgUpdateParamsMultiCoinRewards): {
        typeUrl: string;
        value: MsgUpdateParamsMultiCoinRewards;
    };
    delegate(value: MsgDelegate): {
        typeUrl: string;
        value: MsgDelegate;
    };
    undelegate(value: MsgUndelegate): {
        typeUrl: string;
        value: MsgUndelegate;
    };
    cancelUnbonding(value: MsgCancelUnbondingDelegation): {
        typeUrl: string;
        value: MsgCancelUnbondingDelegation;
    };
    redelegate(value: MsgBeginRedelegate): {
        typeUrl: string;
        value: MsgBeginRedelegate;
    };
    createValidator(value: MsgCreateValidator): {
        typeUrl: string;
        value: MsgCreateValidator;
    };
    editValidator(value: MsgEditValidator): {
        typeUrl: string;
        value: MsgEditValidator;
    };
    withdrawDelegatorReward(value: MsgWithdrawDelegatorReward): {
        typeUrl: string;
        value: MsgWithdrawDelegatorReward;
    };
    withdrawValidatorCommission(value: MsgWithdrawValidatorCommission): {
        typeUrl: string;
        value: MsgWithdrawValidatorCommission;
    };
    setMultiCoinRewardsDistributionPolicy(value: MsgSetMultiCoinRewardsDistributionPolicy): {
        typeUrl: string;
        value: MsgSetMultiCoinRewardsDistributionPolicy;
    };
    toggleMultiCoinRewards(value: MsgToggleMultiCoinRewards): {
        typeUrl: string;
        value: MsgToggleMultiCoinRewards;
    };
};
