"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/multi_coin_rewards/v1beta1/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryMultiCoinStatusResponse = exports.QueryMultiCoinStatusRequest = exports.QueryMultiCoinDistributionPolicyResponse = exports.QueryMultiCoinDistributionPolicyRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var params_1 = require("./params");
var types_1 = require("./types");
exports.protobufPackage = "kyve.multi_coin_rewards.v1beta1";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseQueryParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseQueryMultiCoinDistributionPolicyRequest() {
    return {};
}
exports.QueryMultiCoinDistributionPolicyRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryMultiCoinDistributionPolicyRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.QueryMultiCoinDistributionPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseQueryMultiCoinDistributionPolicyRequest();
        return message;
    },
};
function createBaseQueryMultiCoinDistributionPolicyResponse() {
    return { policy: undefined };
}
exports.QueryMultiCoinDistributionPolicyResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.policy !== undefined) {
            types_1.MultiCoinDistributionPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryMultiCoinDistributionPolicyResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = types_1.MultiCoinDistributionPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { policy: isSet(object.policy) ? types_1.MultiCoinDistributionPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.policy !== undefined) {
            obj.policy = types_1.MultiCoinDistributionPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryMultiCoinDistributionPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseQueryMultiCoinDistributionPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? types_1.MultiCoinDistributionPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseQueryMultiCoinStatusRequest() {
    return { address: "" };
}
exports.QueryMultiCoinStatusRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryMultiCoinStatusRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryMultiCoinStatusRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryMultiCoinStatusRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryMultiCoinStatusResponse() {
    return { enabled: false, pending_multi_coin_rewards: [] };
}
exports.QueryMultiCoinStatusResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.enabled !== false) {
            writer.uint32(8).bool(message.enabled);
        }
        for (var _i = 0, _a = message.pending_multi_coin_rewards; _i < _a.length; _i++) {
            var v = _a[_i];
            coin_1.Coin.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryMultiCoinStatusResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pending_multi_coin_rewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
            pending_multi_coin_rewards: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pending_multi_coin_rewards)
                ? object.pending_multi_coin_rewards.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if (message.enabled !== false) {
            obj.enabled = message.enabled;
        }
        if ((_a = message.pending_multi_coin_rewards) === null || _a === void 0 ? void 0 : _a.length) {
            obj.pending_multi_coin_rewards = message.pending_multi_coin_rewards.map(function (e) { return coin_1.Coin.toJSON(e); });
        }
        return obj;
    },
    create: function (base) {
        return exports.QueryMultiCoinStatusResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueryMultiCoinStatusResponse();
        message.enabled = (_a = object.enabled) !== null && _a !== void 0 ? _a : false;
        message.pending_multi_coin_rewards = ((_b = object.pending_multi_coin_rewards) === null || _b === void 0 ? void 0 : _b.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        return message;
    },
};
exports.QueryServiceName = "kyve.multi_coin_rewards.v1beta1.Query";
var QueryClientImpl = /** @class */ (function () {
    function QueryClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.MultiCoinDistributionPolicyQuery = this.MultiCoinDistributionPolicyQuery.bind(this);
        this.MultiCoinStatus = this.MultiCoinStatus.bind(this);
    }
    QueryClientImpl.prototype.Params = function (request) {
        var data = exports.QueryParamsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Params", data);
        return promise.then(function (data) { return exports.QueryParamsResponse.decode(new wire_1.BinaryReader(data)); });
    };
    QueryClientImpl.prototype.MultiCoinDistributionPolicyQuery = function (request) {
        var data = exports.QueryMultiCoinDistributionPolicyRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "MultiCoinDistributionPolicyQuery", data);
        return promise.then(function (data) { return exports.QueryMultiCoinDistributionPolicyResponse.decode(new wire_1.BinaryReader(data)); });
    };
    QueryClientImpl.prototype.MultiCoinStatus = function (request) {
        var data = exports.QueryMultiCoinStatusRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "MultiCoinStatus", data);
        return promise.then(function (data) { return exports.QueryMultiCoinStatusResponse.decode(new wire_1.BinaryReader(data)); });
    };
    return QueryClientImpl;
}());
exports.QueryClientImpl = QueryClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map