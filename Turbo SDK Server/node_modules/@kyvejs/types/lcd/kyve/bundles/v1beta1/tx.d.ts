import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "kyve.bundles.v1beta1";
/** VoteType ... */
export declare enum VoteType {
    /** VOTE_TYPE_UNSPECIFIED - VOTE_TYPE_UNSPECIFIED ... */
    VOTE_TYPE_UNSPECIFIED = "VOTE_TYPE_UNSPECIFIED",
    /** VOTE_TYPE_VALID - VOTE_TYPE_VALID ... */
    VOTE_TYPE_VALID = "VOTE_TYPE_VALID",
    /** VOTE_TYPE_INVALID - VOTE_TYPE_INVALID ... */
    VOTE_TYPE_INVALID = "VOTE_TYPE_INVALID",
    /** VOTE_TYPE_ABSTAIN - VOTE_TYPE_ABSTAIN ... */
    VOTE_TYPE_ABSTAIN = "VOTE_TYPE_ABSTAIN",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function voteTypeFromJSON(object: any): VoteType;
export declare function voteTypeToJSON(object: VoteType): string;
export declare function voteTypeToNumber(object: VoteType): number;
/** MsgSubmitBundleProposal defines a SDK message for submitting a bundle proposal. */
export interface MsgSubmitBundleProposal {
    /** creator ... */
    creator: string;
    /** staker ... */
    staker: string;
    /** pool_id ... */
    pool_id: string;
    /** storage_id ... */
    storage_id: string;
    /** data_size ... */
    data_size: string;
    /** data_hash ... */
    data_hash: string;
    /** from_index ... */
    from_index: string;
    /** bundle_size ... */
    bundle_size: string;
    /** from_key */
    from_key: string;
    /** to_key ... */
    to_key: string;
    /** bundle_summary ... */
    bundle_summary: string;
}
/** MsgSubmitBundleProposalResponse defines the Msg/SubmitBundleProposal response type. */
export interface MsgSubmitBundleProposalResponse {
}
/** MsgVoteBundleProposal defines a SDK message for voting on a bundle proposal. */
export interface MsgVoteBundleProposal {
    /** creator ... */
    creator: string;
    /** staker ... */
    staker: string;
    /** id ... */
    pool_id: string;
    /** storage_id ... */
    storage_id: string;
    /** vote ... */
    vote: VoteType;
}
/** MsgVoteBundleProposalResponse defines the Msg/VoteBundleProposal response type. */
export interface MsgVoteBundleProposalResponse {
}
/** MsgClaimUploaderRole defines a SDK message for claiming the uploader role. */
export interface MsgClaimUploaderRole {
    /** creator ... */
    creator: string;
    /** staker ... */
    staker: string;
    /** id ... */
    pool_id: string;
}
/** MsgClaimUploaderRoleResponse defines the Msg/ClaimUploaderRole response type. */
export interface MsgClaimUploaderRoleResponse {
}
/** MsgSubmitBundleProposal defines a SDK message for submitting a bundle proposal. */
export interface MsgSkipUploaderRole {
    /** creator ... */
    creator: string;
    /** staker ... */
    staker: string;
    /** pool_id ... */
    pool_id: string;
    /** from_index ... */
    from_index: string;
}
/** MsgSubmitBundleProposalResponse defines the Msg/SubmitBundleProposal response type. */
export interface MsgSkipUploaderRoleResponse {
}
/** MsgUpdateParams defines a SDK message for updating the module parameters. */
export interface MsgUpdateParams {
    /** authority is the address of the governance account. */
    authority: string;
    /** payload defines the x/bundles parameters to update. */
    payload: string;
}
/** MsgUpdateParamsResponse defines the Msg/UpdateParams response type. */
export interface MsgUpdateParamsResponse {
}
export declare const MsgSubmitBundleProposal: MessageFns<MsgSubmitBundleProposal>;
export declare const MsgSubmitBundleProposalResponse: MessageFns<MsgSubmitBundleProposalResponse>;
export declare const MsgVoteBundleProposal: MessageFns<MsgVoteBundleProposal>;
export declare const MsgVoteBundleProposalResponse: MessageFns<MsgVoteBundleProposalResponse>;
export declare const MsgClaimUploaderRole: MessageFns<MsgClaimUploaderRole>;
export declare const MsgClaimUploaderRoleResponse: MessageFns<MsgClaimUploaderRoleResponse>;
export declare const MsgSkipUploaderRole: MessageFns<MsgSkipUploaderRole>;
export declare const MsgSkipUploaderRoleResponse: MessageFns<MsgSkipUploaderRoleResponse>;
export declare const MsgUpdateParams: MessageFns<MsgUpdateParams>;
export declare const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse>;
/** Msg defines the Msg service. */
export interface Msg {
    /** SubmitBundleProposal ... */
    SubmitBundleProposal(request: MsgSubmitBundleProposal): Promise<MsgSubmitBundleProposalResponse>;
    /** VoteBundleProposal ... */
    VoteBundleProposal(request: MsgVoteBundleProposal): Promise<MsgVoteBundleProposalResponse>;
    /** ClaimUploaderRole ... */
    ClaimUploaderRole(request: MsgClaimUploaderRole): Promise<MsgClaimUploaderRoleResponse>;
    /** SkipUploaderRole ... */
    SkipUploaderRole(request: MsgSkipUploaderRole): Promise<MsgSkipUploaderRoleResponse>;
    /**
     * UpdateParams defines a governance operation for updating the x/bundles module
     * parameters. The authority is hard-coded to the x/gov module account.
     */
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
export declare const MsgServiceName = "kyve.bundles.v1beta1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    SubmitBundleProposal(request: MsgSubmitBundleProposal): Promise<MsgSubmitBundleProposalResponse>;
    VoteBundleProposal(request: MsgVoteBundleProposal): Promise<MsgVoteBundleProposalResponse>;
    ClaimUploaderRole(request: MsgClaimUploaderRole): Promise<MsgClaimUploaderRoleResponse>;
    SkipUploaderRole(request: MsgSkipUploaderRole): Promise<MsgSkipUploaderRoleResponse>;
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
