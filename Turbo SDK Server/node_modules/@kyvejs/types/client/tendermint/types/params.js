"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: tendermint/types/params.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ABCIParams = exports.HashedParams = exports.VersionParams = exports.ValidatorParams = exports.EvidenceParams = exports.BlockParams = exports.ConsensusParams = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var duration_1 = require("../../google/protobuf/duration");
exports.protobufPackage = "tendermint.types";
function createBaseConsensusParams() {
    return { block: undefined, evidence: undefined, validator: undefined, version: undefined, abci: undefined };
}
exports.ConsensusParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.block !== undefined) {
            exports.BlockParams.encode(message.block, writer.uint32(10).fork()).join();
        }
        if (message.evidence !== undefined) {
            exports.EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).join();
        }
        if (message.validator !== undefined) {
            exports.ValidatorParams.encode(message.validator, writer.uint32(26).fork()).join();
        }
        if (message.version !== undefined) {
            exports.VersionParams.encode(message.version, writer.uint32(34).fork()).join();
        }
        if (message.abci !== undefined) {
            exports.ABCIParams.encode(message.abci, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseConsensusParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.block = exports.BlockParams.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.evidence = exports.EvidenceParams.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.validator = exports.ValidatorParams.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.version = exports.VersionParams.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.abci = exports.ABCIParams.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            block: isSet(object.block) ? exports.BlockParams.fromJSON(object.block) : undefined,
            evidence: isSet(object.evidence) ? exports.EvidenceParams.fromJSON(object.evidence) : undefined,
            validator: isSet(object.validator) ? exports.ValidatorParams.fromJSON(object.validator) : undefined,
            version: isSet(object.version) ? exports.VersionParams.fromJSON(object.version) : undefined,
            abci: isSet(object.abci) ? exports.ABCIParams.fromJSON(object.abci) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.block !== undefined) {
            obj.block = exports.BlockParams.toJSON(message.block);
        }
        if (message.evidence !== undefined) {
            obj.evidence = exports.EvidenceParams.toJSON(message.evidence);
        }
        if (message.validator !== undefined) {
            obj.validator = exports.ValidatorParams.toJSON(message.validator);
        }
        if (message.version !== undefined) {
            obj.version = exports.VersionParams.toJSON(message.version);
        }
        if (message.abci !== undefined) {
            obj.abci = exports.ABCIParams.toJSON(message.abci);
        }
        return obj;
    },
    create: function (base) {
        return exports.ConsensusParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseConsensusParams();
        message.block = (object.block !== undefined && object.block !== null)
            ? exports.BlockParams.fromPartial(object.block)
            : undefined;
        message.evidence = (object.evidence !== undefined && object.evidence !== null)
            ? exports.EvidenceParams.fromPartial(object.evidence)
            : undefined;
        message.validator = (object.validator !== undefined && object.validator !== null)
            ? exports.ValidatorParams.fromPartial(object.validator)
            : undefined;
        message.version = (object.version !== undefined && object.version !== null)
            ? exports.VersionParams.fromPartial(object.version)
            : undefined;
        message.abci = (object.abci !== undefined && object.abci !== null)
            ? exports.ABCIParams.fromPartial(object.abci)
            : undefined;
        return message;
    },
};
function createBaseBlockParams() {
    return { max_bytes: "0", max_gas: "0" };
}
exports.BlockParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.max_bytes !== "0") {
            writer.uint32(8).int64(message.max_bytes);
        }
        if (message.max_gas !== "0") {
            writer.uint32(16).int64(message.max_gas);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBlockParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.max_bytes = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.max_gas = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            max_bytes: isSet(object.max_bytes) ? globalThis.String(object.max_bytes) : "0",
            max_gas: isSet(object.max_gas) ? globalThis.String(object.max_gas) : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.max_bytes !== "0") {
            obj.max_bytes = message.max_bytes;
        }
        if (message.max_gas !== "0") {
            obj.max_gas = message.max_gas;
        }
        return obj;
    },
    create: function (base) {
        return exports.BlockParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseBlockParams();
        message.max_bytes = (_a = object.max_bytes) !== null && _a !== void 0 ? _a : "0";
        message.max_gas = (_b = object.max_gas) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseEvidenceParams() {
    return { max_age_num_blocks: "0", max_age_duration: undefined, max_bytes: "0" };
}
exports.EvidenceParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.max_age_num_blocks !== "0") {
            writer.uint32(8).int64(message.max_age_num_blocks);
        }
        if (message.max_age_duration !== undefined) {
            duration_1.Duration.encode(message.max_age_duration, writer.uint32(18).fork()).join();
        }
        if (message.max_bytes !== "0") {
            writer.uint32(24).int64(message.max_bytes);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEvidenceParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.max_age_num_blocks = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.max_age_duration = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.max_bytes = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            max_age_num_blocks: isSet(object.max_age_num_blocks) ? globalThis.String(object.max_age_num_blocks) : "0",
            max_age_duration: isSet(object.max_age_duration) ? duration_1.Duration.fromJSON(object.max_age_duration) : undefined,
            max_bytes: isSet(object.max_bytes) ? globalThis.String(object.max_bytes) : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.max_age_num_blocks !== "0") {
            obj.max_age_num_blocks = message.max_age_num_blocks;
        }
        if (message.max_age_duration !== undefined) {
            obj.max_age_duration = duration_1.Duration.toJSON(message.max_age_duration);
        }
        if (message.max_bytes !== "0") {
            obj.max_bytes = message.max_bytes;
        }
        return obj;
    },
    create: function (base) {
        return exports.EvidenceParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseEvidenceParams();
        message.max_age_num_blocks = (_a = object.max_age_num_blocks) !== null && _a !== void 0 ? _a : "0";
        message.max_age_duration = (object.max_age_duration !== undefined && object.max_age_duration !== null)
            ? duration_1.Duration.fromPartial(object.max_age_duration)
            : undefined;
        message.max_bytes = (_b = object.max_bytes) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseValidatorParams() {
    return { pub_key_types: [] };
}
exports.ValidatorParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        for (var _i = 0, _a = message.pub_key_types; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseValidatorParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pub_key_types.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pub_key_types: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pub_key_types)
                ? object.pub_key_types.map(function (e) { return globalThis.String(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if ((_a = message.pub_key_types) === null || _a === void 0 ? void 0 : _a.length) {
            obj.pub_key_types = message.pub_key_types;
        }
        return obj;
    },
    create: function (base) {
        return exports.ValidatorParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseValidatorParams();
        message.pub_key_types = ((_a = object.pub_key_types) === null || _a === void 0 ? void 0 : _a.map(function (e) { return e; })) || [];
        return message;
    },
};
function createBaseVersionParams() {
    return { app: "0" };
}
exports.VersionParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.app !== "0") {
            writer.uint32(8).uint64(message.app);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVersionParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.app = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { app: isSet(object.app) ? globalThis.String(object.app) : "0" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.app !== "0") {
            obj.app = message.app;
        }
        return obj;
    },
    create: function (base) {
        return exports.VersionParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseVersionParams();
        message.app = (_a = object.app) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseHashedParams() {
    return { block_max_bytes: "0", block_max_gas: "0" };
}
exports.HashedParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.block_max_bytes !== "0") {
            writer.uint32(8).int64(message.block_max_bytes);
        }
        if (message.block_max_gas !== "0") {
            writer.uint32(16).int64(message.block_max_gas);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseHashedParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.block_max_bytes = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.block_max_gas = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            block_max_bytes: isSet(object.block_max_bytes) ? globalThis.String(object.block_max_bytes) : "0",
            block_max_gas: isSet(object.block_max_gas) ? globalThis.String(object.block_max_gas) : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.block_max_bytes !== "0") {
            obj.block_max_bytes = message.block_max_bytes;
        }
        if (message.block_max_gas !== "0") {
            obj.block_max_gas = message.block_max_gas;
        }
        return obj;
    },
    create: function (base) {
        return exports.HashedParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseHashedParams();
        message.block_max_bytes = (_a = object.block_max_bytes) !== null && _a !== void 0 ? _a : "0";
        message.block_max_gas = (_b = object.block_max_gas) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseABCIParams() {
    return { vote_extensions_enable_height: "0" };
}
exports.ABCIParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.vote_extensions_enable_height !== "0") {
            writer.uint32(8).int64(message.vote_extensions_enable_height);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseABCIParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.vote_extensions_enable_height = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            vote_extensions_enable_height: isSet(object.vote_extensions_enable_height)
                ? globalThis.String(object.vote_extensions_enable_height)
                : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.vote_extensions_enable_height !== "0") {
            obj.vote_extensions_enable_height = message.vote_extensions_enable_height;
        }
        return obj;
    },
    create: function (base) {
        return exports.ABCIParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseABCIParams();
        message.vote_extensions_enable_height = (_a = object.vote_extensions_enable_height) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=params.js.map