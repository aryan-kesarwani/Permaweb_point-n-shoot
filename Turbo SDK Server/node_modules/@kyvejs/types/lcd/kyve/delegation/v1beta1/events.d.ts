import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "kyve.delegation.v1beta1";
/**
 * EventStartUndelegation is an event emitted when someone starts an undelegation from a protocol node.
 * emitted_by: EndBlock
 */
export interface EventStartUndelegation {
    /** address is the address of the delegator. */
    address: string;
    /** staker is the address of the protocol node. */
    staker: string;
    /** amount is the amount to be undelegated from the protocol node. */
    amount: string;
    /**
     * estimated_undelegation_date is the date in UNIX seconds on when the undelegation will be performed.
     * Note, this number will be incorrect if a governance proposal changes `UnbondingDelegationTime` while unbonding.
     */
    estimated_undelegation_date: string;
}
/**
 * EventUndelegate is an event emitted when someone undelegates from a protocol node.
 * emitted_by: EndBlock
 */
export interface EventUndelegate {
    /** address is the account address of the delegator. */
    address: string;
    /** staker is the account address of the protocol node. */
    staker: string;
    /** amount ... */
    amount: string;
}
/**
 * EventWithdrawRewards ...
 * emitted_by: MsgRedelegate, MsgDelegate, MsgWithdrawRewards, EndBlock
 */
export interface EventWithdrawRewards {
    /** address is the account address of the delegator. */
    address: string;
    /** staker is the account address of the protocol node the users withdraws from. */
    staker: string;
    /** amounts ... */
    amounts: string;
}
export declare const EventStartUndelegation: MessageFns<EventStartUndelegation>;
export declare const EventUndelegate: MessageFns<EventUndelegate>;
export declare const EventWithdrawRewards: MessageFns<EventWithdrawRewards>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
