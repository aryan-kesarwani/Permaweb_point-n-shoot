import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params as Params2 } from "../../../cosmos/gov/v1/gov";
import { Params } from "../../bundles/v1beta1/params";
import { Params as Params5 } from "../../funders/v1beta1/params";
import { Params as Params1 } from "../../global/v1beta1/global";
import { Params as Params4 } from "../../pool/v1beta1/params";
import { Params as Params3 } from "../../stakers/v1/params";
export declare const protobufPackage = "kyve.query.v1beta1";
/** QueryParamsRequest ... */
export interface QueryParamsRequest {
}
/** QueryParamsResponse ... */
export interface QueryParamsResponse {
    /** bundles_params ... */
    bundles_params?: Params | undefined;
    /** global_params ... */
    global_params?: Params1 | undefined;
    /** gov_params ... */
    gov_params?: Params2 | undefined;
    /** stakers_params ... */
    stakers_params?: Params3 | undefined;
    /** pool_params ... */
    pool_params?: Params4 | undefined;
    /** funders_params ... */
    funders_params?: Params5 | undefined;
}
export declare const QueryParamsRequest: MessageFns<QueryParamsRequest>;
export declare const QueryParamsResponse: MessageFns<QueryParamsResponse>;
/** QueryParams ... */
export interface QueryParams {
    /** Pools queries for all pools. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
export declare const QueryParamsServiceName = "kyve.query.v1beta1.QueryParams";
export declare class QueryParamsClientImpl implements QueryParams {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
