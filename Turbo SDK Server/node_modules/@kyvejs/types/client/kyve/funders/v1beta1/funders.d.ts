import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "kyve.funders.v1beta1";
/** Funder is the object which holds info about a single pool funder */
export interface Funder {
    /** address ... */
    address: string;
    /** moniker ... */
    moniker: string;
    /** identity is the 64 bit keybase.io identity string */
    identity: string;
    /** website ... */
    website: string;
    /** contact ... */
    contact: string;
    /** description are some additional notes the funder finds important */
    description: string;
}
/**
 * Funding is the object which holds info about the current funding
 * funder_address and pool_id (m2m) are unique together which means that
 * a funder can only fund each pool once and a pool can only be funded
 * by each funder once. However, a funder can update the amount of funds.
 */
export interface Funding {
    /** funder_address is the address of the funder */
    funder_address: string;
    /** pool_id is the id of the pool this funding is for */
    pool_id: string;
    /** amounts is a list of coins the funder wants to fund the pool with */
    amounts: Coin[];
    /**
     * amounts_per_bundle defines the amount of each coin that are distributed
     * per finalized bundle
     */
    amounts_per_bundle: Coin[];
    /** total_funded is the total amount of coins that the funder has funded */
    total_funded: Coin[];
}
/** FundingState is the object which holds info about the funding state of a pool */
export interface FundingState {
    /** pool_id is the id of the pool this funding is for */
    pool_id: string;
    /** active_funder_addresses is the list of all active fundings */
    active_funder_addresses: string[];
}
export declare const Funder: MessageFns<Funder>;
export declare const Funding: MessageFns<Funding>;
export declare const FundingState: MessageFns<FundingState>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
