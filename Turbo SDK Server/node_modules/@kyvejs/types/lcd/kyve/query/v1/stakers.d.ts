import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { FullStaker } from "../v1beta1/query";
export declare const protobufPackage = "kyve.query.v1";
/** StakerStatus ... */
export declare enum StakerStatus {
    /** STAKER_STATUS_UNSPECIFIED - STAKER_STATUS_UNSPECIFIED ... */
    STAKER_STATUS_UNSPECIFIED = "STAKER_STATUS_UNSPECIFIED",
    /** STAKER_STATUS_PROTOCOL_ACTIVE - STAKER_STATUS_PROTOCOL_ACTIVE ... */
    STAKER_STATUS_PROTOCOL_ACTIVE = "STAKER_STATUS_PROTOCOL_ACTIVE",
    /** STAKER_STATUS_PROTOCOL_INACTIVE - STAKER_STATUS_PROTOCOL_INACTIVE ... */
    STAKER_STATUS_PROTOCOL_INACTIVE = "STAKER_STATUS_PROTOCOL_INACTIVE",
    /** STAKER_STATUS_CHAIN_ACTIVE - STAKER_STATUS_CHAIN_ACTIVE ... */
    STAKER_STATUS_CHAIN_ACTIVE = "STAKER_STATUS_CHAIN_ACTIVE",
    /** STAKER_STATUS_CHAIN_INACTIVE - STAKER_STATUS_CHAIN_INACTIVE ... */
    STAKER_STATUS_CHAIN_INACTIVE = "STAKER_STATUS_CHAIN_INACTIVE",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function stakerStatusFromJSON(object: any): StakerStatus;
export declare function stakerStatusToJSON(object: StakerStatus): string;
export declare function stakerStatusToNumber(object: StakerStatus): number;
/** QueryStakersRequest is the request type for the Query/Stakers RPC method. */
export interface QueryStakersRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
    /** status looks whether a staker is participating in pools or not */
    status: StakerStatus;
    /** search searches for moniker OR address */
    search: string;
}
/** QueryStakersResponse is the response type for the Query/Stakers RPC method. */
export interface QueryStakersResponse {
    /** stakers ... */
    stakers: FullStaker[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
/** QueryStakerRequest is the request type for the Query/Staker RPC method. */
export interface QueryStakerRequest {
    /** address ... */
    address: string;
}
/** QueryStakerResponse is the response type for the Query/Staker RPC method. */
export interface QueryStakerResponse {
    /** staker ... */
    staker?: FullStaker | undefined;
}
/** QueryStakersByPoolRequest is the request type for the Query/Staker RPC method. */
export interface QueryStakersByPoolRequest {
    /** pool_id ... */
    pool_id: string;
}
/** QueryStakersByPoolResponse is the response type for the Query/Staker RPC method. */
export interface QueryStakersByPoolResponse {
    /** stakers ... */
    stakers: FullStaker[];
}
/** QueryStakersByPoolCountRequest ... */
export interface QueryStakersByPoolCountRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
}
/** QueryStakersByPoolCountResponse ... */
export interface QueryStakersByPoolCountResponse {
    /** stakers ... */
    stakers: FullStaker[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
export declare const QueryStakersRequest: MessageFns<QueryStakersRequest>;
export declare const QueryStakersResponse: MessageFns<QueryStakersResponse>;
export declare const QueryStakerRequest: MessageFns<QueryStakerRequest>;
export declare const QueryStakerResponse: MessageFns<QueryStakerResponse>;
export declare const QueryStakersByPoolRequest: MessageFns<QueryStakersByPoolRequest>;
export declare const QueryStakersByPoolResponse: MessageFns<QueryStakersByPoolResponse>;
export declare const QueryStakersByPoolCountRequest: MessageFns<QueryStakersByPoolCountRequest>;
export declare const QueryStakersByPoolCountResponse: MessageFns<QueryStakersByPoolCountResponse>;
/** QueryStakers ... */
export interface QueryStakers {
    /** Stakers queries for all stakers. */
    Stakers(request: QueryStakersRequest): Promise<QueryStakersResponse>;
    /** Staker queries for all stakers. */
    Staker(request: QueryStakerRequest): Promise<QueryStakerResponse>;
    /** StakersByPool queries for all stakers that are currently participating in the given pool */
    StakersByPool(request: QueryStakersByPoolRequest): Promise<QueryStakersByPoolResponse>;
    /**
     * StakersByPool queries for all stakers and sorted them first by number of pools participating and
     * then by delegation
     */
    StakersByPoolCount(request: QueryStakersByPoolCountRequest): Promise<QueryStakersByPoolCountResponse>;
}
export declare const QueryStakersServiceName = "kyve.query.v1.QueryStakers";
export declare class QueryStakersClientImpl implements QueryStakers {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Stakers(request: QueryStakersRequest): Promise<QueryStakersResponse>;
    Staker(request: QueryStakerRequest): Promise<QueryStakerResponse>;
    StakersByPool(request: QueryStakersByPoolRequest): Promise<QueryStakersByPoolResponse>;
    StakersByPoolCount(request: QueryStakersByPoolCountRequest): Promise<QueryStakersByPoolCountResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
