import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "kyve.multi_coin_rewards.v1beta1";
/** UnbondingState stores the state for the unbonding of stakes and delegations. */
export interface QueueState {
    /**
     * low_index is the tail of the queue. It is the
     * oldest entry in the queue. If this entry isn't
     * due, non of the other entries is.
     */
    low_index: string;
    /**
     * high_index is the head of the queue. New entries
     * are added to the top.
     */
    high_index: string;
}
/** MultiCoinPendingRewardsEntry ... */
export interface MultiCoinPendingRewardsEntry {
    /**
     * index is needed for the queue-algorithm which
     * processes the commission changes
     */
    index: string;
    /** address ... */
    address: string;
    /** rewards ... */
    rewards: Coin[];
    creation_date: string;
}
/** MultiCoinDistributionPolicy ... */
export interface MultiCoinDistributionPolicy {
    entries: MultiCoinDistributionDenomEntry[];
}
/** MultiCoinDistributionDenomEntry ... */
export interface MultiCoinDistributionDenomEntry {
    denom: string;
    pool_weights: MultiCoinDistributionPoolWeightEntry[];
}
/** MultiCoinDistributionPoolWeightEntry ... */
export interface MultiCoinDistributionPoolWeightEntry {
    pool_id: string;
    weight: string;
}
export declare const QueueState: MessageFns<QueueState>;
export declare const MultiCoinPendingRewardsEntry: MessageFns<MultiCoinPendingRewardsEntry>;
export declare const MultiCoinDistributionPolicy: MessageFns<MultiCoinDistributionPolicy>;
export declare const MultiCoinDistributionDenomEntry: MessageFns<MultiCoinDistributionDenomEntry>;
export declare const MultiCoinDistributionPoolWeightEntry: MessageFns<MultiCoinDistributionPoolWeightEntry>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
