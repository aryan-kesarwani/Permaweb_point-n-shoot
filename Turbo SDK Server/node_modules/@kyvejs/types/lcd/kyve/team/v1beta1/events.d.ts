import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "kyve.team.v1beta1";
/**
 * MsgCreateTeamVestingAccount is an event emitted when a new team vesting account gets created.
 * emitted_by: MsgCreateTeamVestingAccount
 */
export interface EventCreateTeamVestingAccount {
    /** authority which initiated this action */
    authority: string;
    /** id is a unique identify for each vesting account, tied to a single team member. */
    id: string;
    /** total_allocation is the number of tokens reserved for this team member. */
    total_allocation: string;
    /** commencement is the unix timestamp of the member's official start date. */
    commencement: string;
}
/**
 * EventClawback is an event emitted when the authority claws back tokens from a team vesting account.
 * emitted_by: MsgClawback
 */
export interface EventClawback {
    /** authority which initiated this action */
    authority: string;
    /** id is a unique identify for each vesting account, tied to a single team member. */
    id: string;
    /**
     * clawback is a unix timestamp of a clawback. If timestamp is zero
     * it means that the account has not received a clawback
     */
    clawback: string;
    /** amount which got clawed back. */
    amount: string;
}
/**
 * EventClaimedUnlocked is an event emitted when the authority claims unlocked $KYVE for a recipient.
 * emitted_by: MsgClaimUnlocked
 */
export interface EventClaimedUnlocked {
    /** authority which initiated this action */
    authority: string;
    /** id is a unique identify for each vesting account, tied to a single team member. */
    id: string;
    /** amount is the number of tokens claimed from the unlocked amount. */
    amount: string;
    /** recipient is the receiver address of the claim. */
    recipient: string;
}
/**
 * EventClaimInflationRewards is an event emitted when the authority claims inflation rewards for a recipient.
 * emitted_by: MsgClaimInflationRewards
 */
export interface EventClaimInflationRewards {
    /** authority which initiated this action */
    authority: string;
    /** id is a unique identify for each vesting account, tied to a single team member. */
    id: string;
    /** amount is the amount of inflation rewards the authority should claim for the account holder */
    amount: string;
    /** recipient is the receiver address of the claim. */
    recipient: string;
}
/**
 * EventClaimAuthorityRewards is an event emitted when the authority claims its inflation rewards for a recipient.
 * emitted_by: MsgClaimAuthorityRewards
 */
export interface EventClaimAuthorityRewards {
    /** authority which initiated this action */
    authority: string;
    /** amount is the amount of inflation rewards the authority should claim for the account holder */
    amount: string;
    /** recipient is the receiver address of the claim. */
    recipient: string;
}
export declare const EventCreateTeamVestingAccount: MessageFns<EventCreateTeamVestingAccount>;
export declare const EventClawback: MessageFns<EventClawback>;
export declare const EventClaimedUnlocked: MessageFns<EventClaimedUnlocked>;
export declare const EventClaimInflationRewards: MessageFns<EventClaimInflationRewards>;
export declare const EventClaimAuthorityRewards: MessageFns<EventClaimAuthorityRewards>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
