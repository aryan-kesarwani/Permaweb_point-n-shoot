"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/stakers/v1/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgLeavePoolResponse = exports.MsgLeavePool = exports.MsgJoinPoolResponse = exports.MsgJoinPool = exports.MsgUpdateStakeFractionResponse = exports.MsgUpdateStakeFraction = exports.MsgUpdateCommissionResponse = exports.MsgUpdateCommission = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "kyve.stakers.v1";
function createBaseMsgUpdateCommission() {
    return { creator: "", pool_id: "0", commission: "" };
}
exports.MsgUpdateCommission = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.pool_id !== "0") {
            writer.uint32(16).uint64(message.pool_id);
        }
        if (message.commission !== "") {
            writer.uint32(26).string(message.commission);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgUpdateCommission();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.commission = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
            commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        if (message.commission !== "") {
            obj.commission = message.commission;
        }
        return obj;
    },
    create: function (base) {
        return exports.MsgUpdateCommission.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgUpdateCommission();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.pool_id = (_b = object.pool_id) !== null && _b !== void 0 ? _b : "0";
        message.commission = (_c = object.commission) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgUpdateCommissionResponse() {
    return {};
}
exports.MsgUpdateCommissionResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgUpdateCommissionResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.MsgUpdateCommissionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseMsgUpdateCommissionResponse();
        return message;
    },
};
function createBaseMsgUpdateStakeFraction() {
    return { creator: "", pool_id: "0", stake_fraction: "" };
}
exports.MsgUpdateStakeFraction = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.pool_id !== "0") {
            writer.uint32(16).uint64(message.pool_id);
        }
        if (message.stake_fraction !== "") {
            writer.uint32(26).string(message.stake_fraction);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgUpdateStakeFraction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.stake_fraction = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
            stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        if (message.stake_fraction !== "") {
            obj.stake_fraction = message.stake_fraction;
        }
        return obj;
    },
    create: function (base) {
        return exports.MsgUpdateStakeFraction.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgUpdateStakeFraction();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.pool_id = (_b = object.pool_id) !== null && _b !== void 0 ? _b : "0";
        message.stake_fraction = (_c = object.stake_fraction) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgUpdateStakeFractionResponse() {
    return {};
}
exports.MsgUpdateStakeFractionResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgUpdateStakeFractionResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.MsgUpdateStakeFractionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseMsgUpdateStakeFractionResponse();
        return message;
    },
};
function createBaseMsgJoinPool() {
    return { creator: "", pool_id: "0", pool_address: "", amount: "0", commission: "", stake_fraction: "" };
}
exports.MsgJoinPool = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.pool_id !== "0") {
            writer.uint32(16).uint64(message.pool_id);
        }
        if (message.pool_address !== "") {
            writer.uint32(26).string(message.pool_address);
        }
        if (message.amount !== "0") {
            writer.uint32(32).uint64(message.amount);
        }
        if (message.commission !== "") {
            writer.uint32(42).string(message.commission);
        }
        if (message.stake_fraction !== "") {
            writer.uint32(50).string(message.stake_fraction);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgJoinPool();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.pool_address = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.amount = reader.uint64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.commission = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.stake_fraction = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
            pool_address: isSet(object.pool_address) ? globalThis.String(object.pool_address) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "0",
            commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
            stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        if (message.pool_address !== "") {
            obj.pool_address = message.pool_address;
        }
        if (message.amount !== "0") {
            obj.amount = message.amount;
        }
        if (message.commission !== "") {
            obj.commission = message.commission;
        }
        if (message.stake_fraction !== "") {
            obj.stake_fraction = message.stake_fraction;
        }
        return obj;
    },
    create: function (base) {
        return exports.MsgJoinPool.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseMsgJoinPool();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.pool_id = (_b = object.pool_id) !== null && _b !== void 0 ? _b : "0";
        message.pool_address = (_c = object.pool_address) !== null && _c !== void 0 ? _c : "";
        message.amount = (_d = object.amount) !== null && _d !== void 0 ? _d : "0";
        message.commission = (_e = object.commission) !== null && _e !== void 0 ? _e : "";
        message.stake_fraction = (_f = object.stake_fraction) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseMsgJoinPoolResponse() {
    return {};
}
exports.MsgJoinPoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgJoinPoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.MsgJoinPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseMsgJoinPoolResponse();
        return message;
    },
};
function createBaseMsgLeavePool() {
    return { creator: "", pool_id: "0" };
}
exports.MsgLeavePool = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.pool_id !== "0") {
            writer.uint32(16).uint64(message.pool_id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgLeavePool();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pool_id = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            pool_id: isSet(object.pool_id) ? globalThis.String(object.pool_id) : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.pool_id !== "0") {
            obj.pool_id = message.pool_id;
        }
        return obj;
    },
    create: function (base) {
        return exports.MsgLeavePool.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgLeavePool();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.pool_id = (_b = object.pool_id) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseMsgLeavePoolResponse() {
    return {};
}
exports.MsgLeavePoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgLeavePoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.MsgLeavePoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseMsgLeavePoolResponse();
        return message;
    },
};
function createBaseMsgUpdateParams() {
    return { authority: "", payload: "" };
}
exports.MsgUpdateParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.payload !== "") {
            writer.uint32(18).string(message.payload);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.payload = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.payload !== "") {
            obj.payload = message.payload;
        }
        return obj;
    },
    create: function (base) {
        return exports.MsgUpdateParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgUpdateParams();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.payload = (_b = object.payload) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.MsgUpdateParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
exports.MsgServiceName = "kyve.stakers.v1.Msg";
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.JoinPool = this.JoinPool.bind(this);
        this.LeavePool = this.LeavePool.bind(this);
        this.UpdateCommission = this.UpdateCommission.bind(this);
        this.UpdateStakeFraction = this.UpdateStakeFraction.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
    }
    MsgClientImpl.prototype.JoinPool = function (request) {
        var data = exports.MsgJoinPool.encode(request).finish();
        var promise = this.rpc.request(this.service, "JoinPool", data);
        return promise.then(function (data) { return exports.MsgJoinPoolResponse.decode(new wire_1.BinaryReader(data)); });
    };
    MsgClientImpl.prototype.LeavePool = function (request) {
        var data = exports.MsgLeavePool.encode(request).finish();
        var promise = this.rpc.request(this.service, "LeavePool", data);
        return promise.then(function (data) { return exports.MsgLeavePoolResponse.decode(new wire_1.BinaryReader(data)); });
    };
    MsgClientImpl.prototype.UpdateCommission = function (request) {
        var data = exports.MsgUpdateCommission.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateCommission", data);
        return promise.then(function (data) { return exports.MsgUpdateCommissionResponse.decode(new wire_1.BinaryReader(data)); });
    };
    MsgClientImpl.prototype.UpdateStakeFraction = function (request) {
        var data = exports.MsgUpdateStakeFraction.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateStakeFraction", data);
        return promise.then(function (data) { return exports.MsgUpdateStakeFractionResponse.decode(new wire_1.BinaryReader(data)); });
    };
    MsgClientImpl.prototype.UpdateParams = function (request) {
        var data = exports.MsgUpdateParams.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateParams", data);
        return promise.then(function (data) { return exports.MsgUpdateParamsResponse.decode(new wire_1.BinaryReader(data)); });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map