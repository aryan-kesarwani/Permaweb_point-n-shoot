import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "kyve.funders.v1beta1";
/**
 * WhitelistCoinEntry is an object containing information around a coin which
 * is allowed to be funded in pools
 */
export interface WhitelistCoinEntry {
    /**
     * coin_denom is the denom of a coin which is allowed to be funded, this value
     * needs to be unique
     */
    coin_denom: string;
    /** coin_decimals are the decimals of the coin */
    coin_decimals: number;
    /**
     * min_funding_amount is the minimum required amount of this denom that needs
     * to be funded. It is of type math.Int since a uint64 is not sufficient for a
     * coin with 18 decimals
     */
    min_funding_amount: string;
    /**
     * min_funding_amount_per_bundle is the minimum required amount of this denom
     * that needs to be funded per bundle. It is of type math.Int since a uint64
     * is not sufficient for a coin with 18 decimals
     */
    min_funding_amount_per_bundle: string;
    /**
     * coin_weight is a factor used to sort funders after their funding amounts.
     * This should be the market price of the coin in USD/coin. This value should be kept up-to-date.
     */
    coin_weight: string;
}
/** Params defines the funders module parameters. */
export interface Params {
    /** coin_whitelist is a list of coins that are allowed to fund a pool */
    coin_whitelist: WhitelistCoinEntry[];
    /**
     * Minimum ratio between the funded amount and the amount_per_bundle.
     * In other words this param ensures, that a funder provides at least
     * funding for `min_funding_multiple` bundles.
     */
    min_funding_multiple: string;
}
export declare const WhitelistCoinEntry: MessageFns<WhitelistCoinEntry>;
export declare const Params: MessageFns<Params>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
