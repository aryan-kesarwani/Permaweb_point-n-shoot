"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: kyve/query/v1beta1/query.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolMembership = exports.StakeFractionChangeEntry = exports.CommissionChangeEntry = exports.FullStaker = exports.BasicPool = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var staking_1 = require("../../../cosmos/staking/v1beta1/staking");
var pool_1 = require("../../pool/v1beta1/pool");
exports.protobufPackage = "kyve.query.v1beta1";
function createBaseBasicPool() {
    return {
        id: "0",
        name: "",
        runtime: "",
        logo: "",
        inflation_share_weight: "",
        upload_interval: "0",
        total_funds: [],
        total_stake: "0",
        status: pool_1.PoolStatus.POOL_STATUS_UNSPECIFIED,
    };
}
exports.BasicPool = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== "0") {
            writer.uint32(8).uint64(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.runtime !== "") {
            writer.uint32(26).string(message.runtime);
        }
        if (message.logo !== "") {
            writer.uint32(34).string(message.logo);
        }
        if (message.inflation_share_weight !== "") {
            writer.uint32(42).string(message.inflation_share_weight);
        }
        if (message.upload_interval !== "0") {
            writer.uint32(48).uint64(message.upload_interval);
        }
        for (var _i = 0, _a = message.total_funds; _i < _a.length; _i++) {
            var v = _a[_i];
            coin_1.Coin.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.total_stake !== "0") {
            writer.uint32(64).uint64(message.total_stake);
        }
        if (message.status !== pool_1.PoolStatus.POOL_STATUS_UNSPECIFIED) {
            writer.uint32(72).int32((0, pool_1.poolStatusToNumber)(message.status));
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBasicPool();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.runtime = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.inflation_share_weight = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.upload_interval = reader.uint64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.total_funds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.total_stake = reader.uint64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.status = (0, pool_1.poolStatusFromJSON)(reader.int32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            runtime: isSet(object.runtime) ? globalThis.String(object.runtime) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            inflation_share_weight: isSet(object.inflation_share_weight)
                ? globalThis.String(object.inflation_share_weight)
                : "",
            upload_interval: isSet(object.upload_interval) ? globalThis.String(object.upload_interval) : "0",
            total_funds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.total_funds)
                ? object.total_funds.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
            total_stake: isSet(object.total_stake) ? globalThis.String(object.total_stake) : "0",
            status: isSet(object.status) ? (0, pool_1.poolStatusFromJSON)(object.status) : pool_1.PoolStatus.POOL_STATUS_UNSPECIFIED,
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.runtime !== "") {
            obj.runtime = message.runtime;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.inflation_share_weight !== "") {
            obj.inflation_share_weight = message.inflation_share_weight;
        }
        if (message.upload_interval !== "0") {
            obj.upload_interval = message.upload_interval;
        }
        if ((_a = message.total_funds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.total_funds = message.total_funds.map(function (e) { return coin_1.Coin.toJSON(e); });
        }
        if (message.total_stake !== "0") {
            obj.total_stake = message.total_stake;
        }
        if (message.status !== pool_1.PoolStatus.POOL_STATUS_UNSPECIFIED) {
            obj.status = (0, pool_1.poolStatusToJSON)(message.status);
        }
        return obj;
    },
    create: function (base) {
        return exports.BasicPool.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var message = createBaseBasicPool();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "0";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.runtime = (_c = object.runtime) !== null && _c !== void 0 ? _c : "";
        message.logo = (_d = object.logo) !== null && _d !== void 0 ? _d : "";
        message.inflation_share_weight = (_e = object.inflation_share_weight) !== null && _e !== void 0 ? _e : "";
        message.upload_interval = (_f = object.upload_interval) !== null && _f !== void 0 ? _f : "0";
        message.total_funds = ((_g = object.total_funds) === null || _g === void 0 ? void 0 : _g.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        message.total_stake = (_h = object.total_stake) !== null && _h !== void 0 ? _h : "0";
        message.status = (_j = object.status) !== null && _j !== void 0 ? _j : pool_1.PoolStatus.POOL_STATUS_UNSPECIFIED;
        return message;
    },
};
function createBaseFullStaker() {
    return {
        address: "",
        validator: undefined,
        validator_delegators: "0",
        validator_self_delegation: "0",
        validator_unbonding: "0",
        validator_total_pool_stake: "0",
        validator_commission_rewards: [],
        pools: [],
    };
}
exports.FullStaker = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.validator !== undefined) {
            staking_1.Validator.encode(message.validator, writer.uint32(18).fork()).join();
        }
        if (message.validator_delegators !== "0") {
            writer.uint32(24).uint64(message.validator_delegators);
        }
        if (message.validator_self_delegation !== "0") {
            writer.uint32(32).uint64(message.validator_self_delegation);
        }
        if (message.validator_unbonding !== "0") {
            writer.uint32(40).uint64(message.validator_unbonding);
        }
        if (message.validator_total_pool_stake !== "0") {
            writer.uint32(48).uint64(message.validator_total_pool_stake);
        }
        for (var _i = 0, _a = message.validator_commission_rewards; _i < _a.length; _i++) {
            var v = _a[_i];
            coin_1.Coin.encode(v, writer.uint32(58).fork()).join();
        }
        for (var _b = 0, _c = message.pools; _b < _c.length; _b++) {
            var v = _c[_b];
            exports.PoolMembership.encode(v, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFullStaker();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.validator = staking_1.Validator.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.validator_delegators = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.validator_self_delegation = reader.uint64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.validator_unbonding = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.validator_total_pool_stake = reader.uint64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.validator_commission_rewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.pools.push(exports.PoolMembership.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            validator: isSet(object.validator) ? staking_1.Validator.fromJSON(object.validator) : undefined,
            validator_delegators: isSet(object.validator_delegators) ? globalThis.String(object.validator_delegators) : "0",
            validator_self_delegation: isSet(object.validator_self_delegation)
                ? globalThis.String(object.validator_self_delegation)
                : "0",
            validator_unbonding: isSet(object.validator_unbonding) ? globalThis.String(object.validator_unbonding) : "0",
            validator_total_pool_stake: isSet(object.validator_total_pool_stake)
                ? globalThis.String(object.validator_total_pool_stake)
                : "0",
            validator_commission_rewards: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.validator_commission_rewards)
                ? object.validator_commission_rewards.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
            pools: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pools) ? object.pools.map(function (e) { return exports.PoolMembership.fromJSON(e); }) : [],
        };
    },
    toJSON: function (message) {
        var _a, _b;
        var obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.validator !== undefined) {
            obj.validator = staking_1.Validator.toJSON(message.validator);
        }
        if (message.validator_delegators !== "0") {
            obj.validator_delegators = message.validator_delegators;
        }
        if (message.validator_self_delegation !== "0") {
            obj.validator_self_delegation = message.validator_self_delegation;
        }
        if (message.validator_unbonding !== "0") {
            obj.validator_unbonding = message.validator_unbonding;
        }
        if (message.validator_total_pool_stake !== "0") {
            obj.validator_total_pool_stake = message.validator_total_pool_stake;
        }
        if ((_a = message.validator_commission_rewards) === null || _a === void 0 ? void 0 : _a.length) {
            obj.validator_commission_rewards = message.validator_commission_rewards.map(function (e) { return coin_1.Coin.toJSON(e); });
        }
        if ((_b = message.pools) === null || _b === void 0 ? void 0 : _b.length) {
            obj.pools = message.pools.map(function (e) { return exports.PoolMembership.toJSON(e); });
        }
        return obj;
    },
    create: function (base) {
        return exports.FullStaker.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBaseFullStaker();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.validator = (object.validator !== undefined && object.validator !== null)
            ? staking_1.Validator.fromPartial(object.validator)
            : undefined;
        message.validator_delegators = (_b = object.validator_delegators) !== null && _b !== void 0 ? _b : "0";
        message.validator_self_delegation = (_c = object.validator_self_delegation) !== null && _c !== void 0 ? _c : "0";
        message.validator_unbonding = (_d = object.validator_unbonding) !== null && _d !== void 0 ? _d : "0";
        message.validator_total_pool_stake = (_e = object.validator_total_pool_stake) !== null && _e !== void 0 ? _e : "0";
        message.validator_commission_rewards = ((_f = object.validator_commission_rewards) === null || _f === void 0 ? void 0 : _f.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        message.pools = ((_g = object.pools) === null || _g === void 0 ? void 0 : _g.map(function (e) { return exports.PoolMembership.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseCommissionChangeEntry() {
    return { commission: "", creation_date: "0" };
}
exports.CommissionChangeEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.commission !== "") {
            writer.uint32(10).string(message.commission);
        }
        if (message.creation_date !== "0") {
            writer.uint32(16).int64(message.creation_date);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCommissionChangeEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.commission = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.creation_date = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
            creation_date: isSet(object.creation_date) ? globalThis.String(object.creation_date) : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.commission !== "") {
            obj.commission = message.commission;
        }
        if (message.creation_date !== "0") {
            obj.creation_date = message.creation_date;
        }
        return obj;
    },
    create: function (base) {
        return exports.CommissionChangeEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseCommissionChangeEntry();
        message.commission = (_a = object.commission) !== null && _a !== void 0 ? _a : "";
        message.creation_date = (_b = object.creation_date) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseStakeFractionChangeEntry() {
    return { stake_fraction: "", creation_date: "0" };
}
exports.StakeFractionChangeEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.stake_fraction !== "") {
            writer.uint32(10).string(message.stake_fraction);
        }
        if (message.creation_date !== "0") {
            writer.uint32(16).int64(message.creation_date);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseStakeFractionChangeEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.stake_fraction = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.creation_date = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
            creation_date: isSet(object.creation_date) ? globalThis.String(object.creation_date) : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.stake_fraction !== "") {
            obj.stake_fraction = message.stake_fraction;
        }
        if (message.creation_date !== "0") {
            obj.creation_date = message.creation_date;
        }
        return obj;
    },
    create: function (base) {
        return exports.StakeFractionChangeEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseStakeFractionChangeEntry();
        message.stake_fraction = (_a = object.stake_fraction) !== null && _a !== void 0 ? _a : "";
        message.creation_date = (_b = object.creation_date) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBasePoolMembership() {
    return {
        pool: undefined,
        points: "0",
        is_leaving: false,
        pool_address: "",
        balance: "0",
        commission: "",
        pending_commission_change: undefined,
        stake_fraction: "",
        pending_stake_fraction_change: undefined,
        pool_stake: "0",
    };
}
exports.PoolMembership = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.pool !== undefined) {
            exports.BasicPool.encode(message.pool, writer.uint32(10).fork()).join();
        }
        if (message.points !== "0") {
            writer.uint32(16).uint64(message.points);
        }
        if (message.is_leaving !== false) {
            writer.uint32(24).bool(message.is_leaving);
        }
        if (message.pool_address !== "") {
            writer.uint32(34).string(message.pool_address);
        }
        if (message.balance !== "0") {
            writer.uint32(40).uint64(message.balance);
        }
        if (message.commission !== "") {
            writer.uint32(50).string(message.commission);
        }
        if (message.pending_commission_change !== undefined) {
            exports.CommissionChangeEntry.encode(message.pending_commission_change, writer.uint32(58).fork()).join();
        }
        if (message.stake_fraction !== "") {
            writer.uint32(66).string(message.stake_fraction);
        }
        if (message.pending_stake_fraction_change !== undefined) {
            exports.StakeFractionChangeEntry.encode(message.pending_stake_fraction_change, writer.uint32(74).fork()).join();
        }
        if (message.pool_stake !== "0") {
            writer.uint32(80).uint64(message.pool_stake);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePoolMembership();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pool = exports.BasicPool.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.points = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.is_leaving = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.pool_address = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.balance = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.commission = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.pending_commission_change = exports.CommissionChangeEntry.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.stake_fraction = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.pending_stake_fraction_change = exports.StakeFractionChangeEntry.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.pool_stake = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pool: isSet(object.pool) ? exports.BasicPool.fromJSON(object.pool) : undefined,
            points: isSet(object.points) ? globalThis.String(object.points) : "0",
            is_leaving: isSet(object.is_leaving) ? globalThis.Boolean(object.is_leaving) : false,
            pool_address: isSet(object.pool_address) ? globalThis.String(object.pool_address) : "",
            balance: isSet(object.balance) ? globalThis.String(object.balance) : "0",
            commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
            pending_commission_change: isSet(object.pending_commission_change)
                ? exports.CommissionChangeEntry.fromJSON(object.pending_commission_change)
                : undefined,
            stake_fraction: isSet(object.stake_fraction) ? globalThis.String(object.stake_fraction) : "",
            pending_stake_fraction_change: isSet(object.pending_stake_fraction_change)
                ? exports.StakeFractionChangeEntry.fromJSON(object.pending_stake_fraction_change)
                : undefined,
            pool_stake: isSet(object.pool_stake) ? globalThis.String(object.pool_stake) : "0",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.pool !== undefined) {
            obj.pool = exports.BasicPool.toJSON(message.pool);
        }
        if (message.points !== "0") {
            obj.points = message.points;
        }
        if (message.is_leaving !== false) {
            obj.is_leaving = message.is_leaving;
        }
        if (message.pool_address !== "") {
            obj.pool_address = message.pool_address;
        }
        if (message.balance !== "0") {
            obj.balance = message.balance;
        }
        if (message.commission !== "") {
            obj.commission = message.commission;
        }
        if (message.pending_commission_change !== undefined) {
            obj.pending_commission_change = exports.CommissionChangeEntry.toJSON(message.pending_commission_change);
        }
        if (message.stake_fraction !== "") {
            obj.stake_fraction = message.stake_fraction;
        }
        if (message.pending_stake_fraction_change !== undefined) {
            obj.pending_stake_fraction_change = exports.StakeFractionChangeEntry.toJSON(message.pending_stake_fraction_change);
        }
        if (message.pool_stake !== "0") {
            obj.pool_stake = message.pool_stake;
        }
        return obj;
    },
    create: function (base) {
        return exports.PoolMembership.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBasePoolMembership();
        message.pool = (object.pool !== undefined && object.pool !== null) ? exports.BasicPool.fromPartial(object.pool) : undefined;
        message.points = (_a = object.points) !== null && _a !== void 0 ? _a : "0";
        message.is_leaving = (_b = object.is_leaving) !== null && _b !== void 0 ? _b : false;
        message.pool_address = (_c = object.pool_address) !== null && _c !== void 0 ? _c : "";
        message.balance = (_d = object.balance) !== null && _d !== void 0 ? _d : "0";
        message.commission = (_e = object.commission) !== null && _e !== void 0 ? _e : "";
        message.pending_commission_change =
            (object.pending_commission_change !== undefined && object.pending_commission_change !== null)
                ? exports.CommissionChangeEntry.fromPartial(object.pending_commission_change)
                : undefined;
        message.stake_fraction = (_f = object.stake_fraction) !== null && _f !== void 0 ? _f : "";
        message.pending_stake_fraction_change =
            (object.pending_stake_fraction_change !== undefined && object.pending_stake_fraction_change !== null)
                ? exports.StakeFractionChangeEntry.fromPartial(object.pending_stake_fraction_change)
                : undefined;
        message.pool_stake = (_g = object.pool_stake) !== null && _g !== void 0 ? _g : "0";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map